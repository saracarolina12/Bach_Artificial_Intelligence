
05Interrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000041c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae1  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  74:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z11cero_en_bitPVhh>:

//globales
uint8_t tecla, cont=0;

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
  7c:	fc 01       	movw	r30, r24
  7e:	80 81       	ld	r24, Z
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <_Z11cero_en_bitPVhh+0xc>
  84:	95 95       	asr	r25
  86:	87 95       	ror	r24
  88:	6a 95       	dec	r22
  8a:	e2 f7       	brpl	.-8      	; 0x84 <_Z11cero_en_bitPVhh+0x8>
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	8f 27       	eor	r24, r31
}
  90:	81 70       	andi	r24, 0x01	; 1
  92:	08 95       	ret

00000094 <_Z3RTRh>:
void RTR(uint8_t pin){
  94:	cf 93       	push	r28
  96:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f e4       	ldi	r24, 0x4F	; 79
  9a:	93 ec       	ldi	r25, 0xC3	; 195
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z3RTRh+0x8>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z3RTRh+0xe>
  a2:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(&PINA,pin));
  a4:	6c 2f       	mov	r22, r28
  a6:	89 e3       	ldi	r24, 0x39	; 57
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
  ae:	81 11       	cpse	r24, r1
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <_Z3RTRh+0x10>
  b2:	8f e4       	ldi	r24, 0x4F	; 79
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z3RTRh+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_Z3RTRh+0x28>
  bc:	00 00       	nop
	_delay_ms(50);
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <_Z7pressedv>:

uint8_t pressed(void){
  c2:	cf 93       	push	r28
	while(1){
		PORTT = ~(1<<0);				//1111_1110 rota tierra
  c4:	8e ef       	ldi	r24, 0xFE	; 254
  c6:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  c8:	00 00       	nop
		asm("nop");
  ca:	00 00       	nop
		//ABCD
		if(cero_en_bit(&PINT,4)){		//A
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	89 e3       	ldi	r24, 0x39	; 57
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
  d6:	88 23       	and	r24, r24
  d8:	29 f0       	breq	.+10     	; 0xe4 <_Z7pressedv+0x22>
			RTR(4);
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(13);
  e0:	cd e0       	ldi	r28, 0x0D	; 13
  e2:	ba c0       	rjmp	.+372    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,5)){		//B
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
  ee:	88 23       	and	r24, r24
  f0:	29 f0       	breq	.+10     	; 0xfc <_Z7pressedv+0x3a>
			RTR(5);
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(12);
  f8:	cc e0       	ldi	r28, 0x0C	; 12
  fa:	ae c0       	rjmp	.+348    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,6)){		//C
  fc:	66 e0       	ldi	r22, 0x06	; 6
  fe:	89 e3       	ldi	r24, 0x39	; 57
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 106:	88 23       	and	r24, r24
 108:	29 f0       	breq	.+10     	; 0x114 <_Z7pressedv+0x52>
			RTR(6);
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(11);
 110:	cb e0       	ldi	r28, 0x0B	; 11
 112:	a2 c0       	rjmp	.+324    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,7)){		//D
 114:	67 e0       	ldi	r22, 0x07	; 7
 116:	89 e3       	ldi	r24, 0x39	; 57
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 11e:	88 23       	and	r24, r24
 120:	29 f0       	breq	.+10     	; 0x12c <_Z7pressedv+0x6a>
			RTR(7);
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(10);
 128:	ca e0       	ldi	r28, 0x0A	; 10
 12a:	96 c0       	rjmp	.+300    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		PORTT = ~(1<<1);
 12c:	8d ef       	ldi	r24, 0xFD	; 253
 12e:	8b bb       	out	0x1b, r24	; 27
		
		//3,6,9,#(F)
		if(cero_en_bit(&PINT,4)){		//A
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	89 e3       	ldi	r24, 0x39	; 57
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 13a:	88 23       	and	r24, r24
 13c:	29 f0       	breq	.+10     	; 0x148 <_Z7pressedv+0x86>
			RTR(4);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(15);										//RESETEAR
 144:	cf e0       	ldi	r28, 0x0F	; 15
 146:	88 c0       	rjmp	.+272    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,5)){		//B
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	89 e3       	ldi	r24, 0x39	; 57
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 152:	88 23       	and	r24, r24
 154:	29 f0       	breq	.+10     	; 0x160 <_Z7pressedv+0x9e>
			RTR(5);
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(9);
 15c:	c9 e0       	ldi	r28, 0x09	; 9
 15e:	7c c0       	rjmp	.+248    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,6)){		//C
 160:	66 e0       	ldi	r22, 0x06	; 6
 162:	89 e3       	ldi	r24, 0x39	; 57
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 16a:	88 23       	and	r24, r24
 16c:	29 f0       	breq	.+10     	; 0x178 <_Z7pressedv+0xb6>
			RTR(6);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(6);
 174:	c6 e0       	ldi	r28, 0x06	; 6
 176:	70 c0       	rjmp	.+224    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,7)){		//D
 178:	67 e0       	ldi	r22, 0x07	; 7
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 182:	c8 2f       	mov	r28, r24
 184:	88 23       	and	r24, r24
 186:	29 f0       	breq	.+10     	; 0x192 <_Z7pressedv+0xd0>
			RTR(7);
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(3);
 18e:	c3 e0       	ldi	r28, 0x03	; 3
 190:	63 c0       	rjmp	.+198    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		PORTT = ~(1<<2);
 192:	8b ef       	ldi	r24, 0xFB	; 251
 194:	8b bb       	out	0x1b, r24	; 27
		
		//2,5,8,0
		if(cero_en_bit(&PINT,4)){		//A
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	89 e3       	ldi	r24, 0x39	; 57
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 1a0:	88 23       	and	r24, r24
 1a2:	21 f0       	breq	.+8      	; 0x1ac <_Z7pressedv+0xea>
			RTR(4);
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(0);
 1aa:	56 c0       	rjmp	.+172    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,5)){		//B
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	89 e3       	ldi	r24, 0x39	; 57
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 1b6:	88 23       	and	r24, r24
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <_Z7pressedv+0x102>
			RTR(5);
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(8);
 1c0:	c8 e0       	ldi	r28, 0x08	; 8
 1c2:	4a c0       	rjmp	.+148    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,6)){		//C
 1c4:	66 e0       	ldi	r22, 0x06	; 6
 1c6:	89 e3       	ldi	r24, 0x39	; 57
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 1ce:	88 23       	and	r24, r24
 1d0:	29 f0       	breq	.+10     	; 0x1dc <_Z7pressedv+0x11a>
			RTR(6);
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(5);
 1d8:	c5 e0       	ldi	r28, 0x05	; 5
 1da:	3e c0       	rjmp	.+124    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,7)){		//D
 1dc:	67 e0       	ldi	r22, 0x07	; 7
 1de:	89 e3       	ldi	r24, 0x39	; 57
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 1e6:	88 23       	and	r24, r24
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <_Z7pressedv+0x132>
			RTR(7);
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(2);
 1f0:	c2 e0       	ldi	r28, 0x02	; 2
 1f2:	32 c0       	rjmp	.+100    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		PORTT = ~(1<<3);
 1f4:	87 ef       	ldi	r24, 0xF7	; 247
 1f6:	8b bb       	out	0x1b, r24	; 27
		
		//1,4,7,*(E)
		if(cero_en_bit(&PINT,4)){		//A
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	89 e3       	ldi	r24, 0x39	; 57
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 202:	88 23       	and	r24, r24
 204:	29 f0       	breq	.+10     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
			RTR(4);
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(14);
 20c:	ce e0       	ldi	r28, 0x0E	; 14
 20e:	24 c0       	rjmp	.+72     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,5)){		//B
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	89 e3       	ldi	r24, 0x39	; 57
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 21a:	88 23       	and	r24, r24
 21c:	29 f0       	breq	.+10     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
			RTR(5);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(7);
 224:	c7 e0       	ldi	r28, 0x07	; 7
 226:	18 c0       	rjmp	.+48     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,6)){		//C
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 232:	88 23       	and	r24, r24
 234:	29 f0       	breq	.+10     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
			RTR(6);
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(4);
 23c:	c4 e0       	ldi	r28, 0x04	; 4
 23e:	0c c0       	rjmp	.+24     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		}
		if(cero_en_bit(&PINT,7)){		//D
 240:	67 e0       	ldi	r22, 0x07	; 7
 242:	89 e3       	ldi	r24, 0x39	; 57
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11cero_en_bitPVhh>
 24a:	88 23       	and	r24, r24
 24c:	09 f4       	brne	.+2      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 24e:	3a cf       	rjmp	.-396    	; 0xc4 <_Z7pressedv+0x2>
			RTR(7);
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	0e 94 4a 00 	call	0x94	; 0x94 <_Z3RTRh>
			return(1);
 256:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
}
 258:	8c 2f       	mov	r24, r28
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <_Z8imprimirv>:
						 
void imprimir(){
	if(cont == 0){PORTC = 0b00000000;}
 25e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 262:	81 11       	cpse	r24, r1
 264:	01 c0       	rjmp	.+2      	; 0x268 <_Z8imprimirv+0xa>
 266:	15 ba       	out	0x15, r1	; 21
	if(cont == 1){PORTC = 0b00100000;}
 268:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	11 f4       	brne	.+4      	; 0x274 <_Z8imprimirv+0x16>
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	85 bb       	out	0x15, r24	; 21
	if(cont == 2){PORTC = 0b00010000;}
 274:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	11 f4       	brne	.+4      	; 0x280 <_Z8imprimirv+0x22>
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	85 bb       	out	0x15, r24	; 21
	if(cont == 3){PORTC = 0b00110000;}
 280:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	11 f4       	brne	.+4      	; 0x28c <_Z8imprimirv+0x2e>
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	85 bb       	out	0x15, r24	; 21
	if(cont == 4){PORTC = 0b00001000;}
 28c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	11 f4       	brne	.+4      	; 0x298 <_Z8imprimirv+0x3a>
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	85 bb       	out	0x15, r24	; 21
	if(cont == 5){PORTC = 0b00101000;}
 298:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	11 f4       	brne	.+4      	; 0x2a4 <_Z8imprimirv+0x46>
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	85 bb       	out	0x15, r24	; 21
	if(cont == 6){PORTC = 0b00011000;}
 2a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a8:	86 30       	cpi	r24, 0x06	; 6
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <_Z8imprimirv+0x52>
 2ac:	88 e1       	ldi	r24, 0x18	; 24
 2ae:	85 bb       	out	0x15, r24	; 21
	if(cont == 7){PORTC = 0b00111000;}
 2b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b4:	87 30       	cpi	r24, 0x07	; 7
 2b6:	11 f4       	brne	.+4      	; 0x2bc <_Z8imprimirv+0x5e>
 2b8:	88 e3       	ldi	r24, 0x38	; 56
 2ba:	85 bb       	out	0x15, r24	; 21
	if(cont == 8){PORTC = 0b00000100;}
 2bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <_Z8imprimirv+0x6a>
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	85 bb       	out	0x15, r24	; 21
	if(cont == 9){PORTC = 0b00100100;}
 2c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2cc:	89 30       	cpi	r24, 0x09	; 9
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <_Z8imprimirv+0x76>
 2d0:	84 e2       	ldi	r24, 0x24	; 36
 2d2:	85 bb       	out	0x15, r24	; 21
 2d4:	08 95       	ret

000002d6 <_Z9showservoh>:
}
void showservo(uint8_t tec){
	PORTD = tec;
 2d6:	82 bb       	out	0x12, r24	; 18
	if(tec == 0) OCR0 = 15;
 2d8:	81 11       	cpse	r24, r1
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <_Z9showservoh+0xc>
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	8c bf       	out	0x3c, r24	; 60
 2e0:	08 95       	ret
	else if(tec == 1) OCR0 = 16;
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	19 f4       	brne	.+6      	; 0x2ec <_Z9showservoh+0x16>
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	8c bf       	out	0x3c, r24	; 60
 2ea:	08 95       	ret
	else if(tec == 2) OCR0 = 18;
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <_Z9showservoh+0x20>
 2f0:	82 e1       	ldi	r24, 0x12	; 18
 2f2:	8c bf       	out	0x3c, r24	; 60
 2f4:	08 95       	ret
	else if(tec == 3) OCR0 = 20;
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	19 f4       	brne	.+6      	; 0x300 <_Z9showservoh+0x2a>
 2fa:	84 e1       	ldi	r24, 0x14	; 20
 2fc:	8c bf       	out	0x3c, r24	; 60
 2fe:	08 95       	ret
	else if(tec == 4) OCR0 = 21;
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	19 f4       	brne	.+6      	; 0x30a <_Z9showservoh+0x34>
 304:	85 e1       	ldi	r24, 0x15	; 21
 306:	8c bf       	out	0x3c, r24	; 60
 308:	08 95       	ret
	else if(tec == 5) OCR0 = 23;
 30a:	85 30       	cpi	r24, 0x05	; 5
 30c:	19 f4       	brne	.+6      	; 0x314 <_Z9showservoh+0x3e>
 30e:	87 e1       	ldi	r24, 0x17	; 23
 310:	8c bf       	out	0x3c, r24	; 60
 312:	08 95       	ret
	else if(tec == 6) OCR0 = 25;
 314:	86 30       	cpi	r24, 0x06	; 6
 316:	19 f4       	brne	.+6      	; 0x31e <_Z9showservoh+0x48>
 318:	89 e1       	ldi	r24, 0x19	; 25
 31a:	8c bf       	out	0x3c, r24	; 60
 31c:	08 95       	ret
	else if(tec == 7) OCR0 = 26;
 31e:	87 30       	cpi	r24, 0x07	; 7
 320:	19 f4       	brne	.+6      	; 0x328 <_Z9showservoh+0x52>
 322:	8a e1       	ldi	r24, 0x1A	; 26
 324:	8c bf       	out	0x3c, r24	; 60
 326:	08 95       	ret
	else if(tec == 8) OCR0 = 28;
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	19 f4       	brne	.+6      	; 0x332 <_Z9showservoh+0x5c>
 32c:	8c e1       	ldi	r24, 0x1C	; 28
 32e:	8c bf       	out	0x3c, r24	; 60
 330:	08 95       	ret
	else if(tec == 9) OCR0 = 30;
 332:	89 30       	cpi	r24, 0x09	; 9
 334:	11 f4       	brne	.+4      	; 0x33a <_Z9showservoh+0x64>
 336:	8e e1       	ldi	r24, 0x1E	; 30
 338:	8c bf       	out	0x3c, r24	; 60
 33a:	08 95       	ret

0000033c <main>:
}

int main(void){
    //teclado
    DDRT = 0b00001111;					//7->4: entradas,3->0: salidas
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	9a bb       	out	0x1a, r25	; 26
    PORTT = 0b11111111;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	8b bb       	out	0x1b, r24	; 27
    
    //declarar otras variables
	//display
	DDRC = 0b11111111;
 344:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
 346:	15 ba       	out	0x15, r1	; 21
	//servo
	DDRB = 0b00001000;
 348:	28 e0       	ldi	r18, 0x08	; 8
 34a:	27 bb       	out	0x17, r18	; 23
	PORTB = 0xFF;
 34c:	88 bb       	out	0x18, r24	; 24
	
	TCNT0 = 0;
 34e:	12 be       	out	0x32, r1	; 50
	OCR0 = 15;
 350:	9c bf       	out	0x3c, r25	; 60
	TCCR0 = 0b01101100; //N=256,4mhz,PWM,inicia en 1
 352:	9c e6       	ldi	r25, 0x6C	; 108
 354:	93 bf       	out	0x33, r25	; 51
	
	DDRD = 0xFF;
 356:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
 358:	12 ba       	out	0x12, r1	; 18
    while (1){
		tecla = pressed();
 35a:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z7pressedv>
 35e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tecla>
		if(tecla == 13){ //servo
 362:	8d 30       	cpi	r24, 0x0D	; 13
 364:	29 f4       	brne	.+10     	; 0x370 <main+0x34>
			showservo(cont);
 366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z9showservoh>
 36e:	f5 cf       	rjmp	.-22     	; 0x35a <main+0x1e>
		}
		else if(tecla == 9 && cont<9){ //?
 370:	89 30       	cpi	r24, 0x09	; 9
 372:	59 f4       	brne	.+22     	; 0x38a <main+0x4e>
 374:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 378:	99 30       	cpi	r25, 0x09	; 9
 37a:	38 f4       	brcc	.+14     	; 0x38a <main+0x4e>
			cont++;
 37c:	9f 5f       	subi	r25, 0xFF	; 255
 37e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			DDRD = cont;
 382:	91 bb       	out	0x11, r25	; 17
			imprimir();
 384:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z8imprimirv>
 388:	e8 cf       	rjmp	.-48     	; 0x35a <main+0x1e>
		}
		else if(tecla == 1 && cont>0){ //?
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	31 f7       	brne	.-52     	; 0x35a <main+0x1e>
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 392:	88 23       	and	r24, r24
 394:	11 f3       	breq	.-60     	; 0x35a <main+0x1e>
			cont--;
 396:	81 50       	subi	r24, 0x01	; 1
 398:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			DDRD = cont;
 39c:	81 bb       	out	0x11, r24	; 17
			imprimir();
 39e:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z8imprimirv>
 3a2:	db cf       	rjmp	.-74     	; 0x35a <main+0x1e>

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
