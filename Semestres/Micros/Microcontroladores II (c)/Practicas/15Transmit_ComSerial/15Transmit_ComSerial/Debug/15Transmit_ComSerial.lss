
15Transmit_ComSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000280  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5e  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039b  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 30 01 	call	0x260	; 0x260 <main>
  8a:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:

uint8_t USART_Receive(void) //Se utiliza cuando no se configura la interrupción de recepción. De preferencia siempre trabajar con interrupción.
{
	while (!(UCSRA&(1<<RXC))) {}
	return UDR;
}
  92:	21 b3       	in	r18, 0x11	; 17
  94:	22 60       	ori	r18, 0x02	; 2
  96:	21 bb       	out	0x11, r18	; 17
  98:	90 bd       	out	0x20, r25	; 32
  9a:	89 b9       	out	0x09, r24	; 9
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <USART_Transmit>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <cero_en_bit>:

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  ae:	fc 01       	movw	r30, r24
  b0:	80 81       	ld	r24, Z
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <cero_en_bit+0xc>
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <cero_en_bit+0x8>
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	8f 27       	eor	r24, r31
}
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	08 95       	ret

000000c6 <hasta_tecla>:
uint8_t USART_Receive(void);

volatile uint8_t data;

uint8_t hasta_tecla(void)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	60 97       	sbiw	r28, 0x10	; 16
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t regreso[4][4] = {{0,0,0,0},{13,3,6,9},{0,2,5,8},{10,1,4,7}};
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	e0 e6       	ldi	r30, 0x60	; 96
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <hasta_tecla+0x22>
	while(1)
	{
		for(int i=0;i<4;i++)
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	a5 c0       	rjmp	.+330    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
		{
			PORTT = ~(1<<i);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	00 2e       	mov	r0, r16
  fc:	02 c0       	rjmp	.+4      	; 0x102 <hasta_tecla+0x3c>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <hasta_tecla+0x38>
 106:	80 95       	com	r24
 108:	8b bb       	out	0x1b, r24	; 27
			asm("nop");
 10a:	00 00       	nop
			if(cero_en_bit(&PINT,4))
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	89 e3       	ldi	r24, 0x39	; 57
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 116:	88 23       	and	r24, r24
 118:	f9 f0       	breq	.+62     	; 0x158 <hasta_tecla+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8f e4       	ldi	r24, 0x4F	; 79
 11c:	93 ec       	ldi	r25, 0xC3	; 195
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <hasta_tecla+0x58>
 122:	00 c0       	rjmp	.+0      	; 0x124 <hasta_tecla+0x5e>
 124:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,4)){}
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	89 e3       	ldi	r24, 0x39	; 57
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 130:	81 11       	cpse	r24, r1
 132:	f9 cf       	rjmp	.-14     	; 0x126 <hasta_tecla+0x60>
 134:	8f e4       	ldi	r24, 0x4F	; 79
 136:	93 ec       	ldi	r25, 0xC3	; 195
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <hasta_tecla+0x72>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <hasta_tecla+0x78>
 13e:	00 00       	nop
				_delay_ms(50);
				return regreso[i][0];
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	00 0f       	add	r16, r16
 146:	11 1f       	adc	r17, r17
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e0 0f       	add	r30, r16
 152:	f1 1f       	adc	r31, r17
 154:	80 81       	ld	r24, Z
 156:	79 c0       	rjmp	.+242    	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
			}
			if(cero_en_bit(&PINT,5))
 158:	65 e0       	ldi	r22, 0x05	; 5
 15a:	89 e3       	ldi	r24, 0x39	; 57
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 162:	88 23       	and	r24, r24
 164:	f9 f0       	breq	.+62     	; 0x1a4 <hasta_tecla+0xde>
 166:	8f e4       	ldi	r24, 0x4F	; 79
 168:	93 ec       	ldi	r25, 0xC3	; 195
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <hasta_tecla+0xa4>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <hasta_tecla+0xaa>
 170:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,5)){}
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	89 e3       	ldi	r24, 0x39	; 57
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 17c:	81 11       	cpse	r24, r1
 17e:	f9 cf       	rjmp	.-14     	; 0x172 <hasta_tecla+0xac>
 180:	8f e4       	ldi	r24, 0x4F	; 79
 182:	93 ec       	ldi	r25, 0xC3	; 195
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <hasta_tecla+0xbe>
 188:	00 c0       	rjmp	.+0      	; 0x18a <hasta_tecla+0xc4>
 18a:	00 00       	nop
				_delay_ms(50);
				return regreso[i][1];
 18c:	00 0f       	add	r16, r16
 18e:	11 1f       	adc	r17, r17
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
 194:	e1 e0       	ldi	r30, 0x01	; 1
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
 19c:	e0 0f       	add	r30, r16
 19e:	f1 1f       	adc	r31, r17
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	53 c0       	rjmp	.+166    	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
			}
			if(cero_en_bit(&PINT,6))
 1a4:	66 e0       	ldi	r22, 0x06	; 6
 1a6:	89 e3       	ldi	r24, 0x39	; 57
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 1ae:	88 23       	and	r24, r24
 1b0:	f9 f0       	breq	.+62     	; 0x1f0 <hasta_tecla+0x12a>
 1b2:	8f e4       	ldi	r24, 0x4F	; 79
 1b4:	93 ec       	ldi	r25, 0xC3	; 195
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <hasta_tecla+0xf0>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <hasta_tecla+0xf6>
 1bc:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,6)){}
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	89 e3       	ldi	r24, 0x39	; 57
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 1c8:	81 11       	cpse	r24, r1
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <hasta_tecla+0xf8>
 1cc:	8f e4       	ldi	r24, 0x4F	; 79
 1ce:	93 ec       	ldi	r25, 0xC3	; 195
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <hasta_tecla+0x10a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <hasta_tecla+0x110>
 1d6:	00 00       	nop
				_delay_ms(50);
				return regreso[i][2];
 1d8:	00 0f       	add	r16, r16
 1da:	11 1f       	adc	r17, r17
 1dc:	00 0f       	add	r16, r16
 1de:	11 1f       	adc	r17, r17
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e0 0f       	add	r30, r16
 1ea:	f1 1f       	adc	r31, r17
 1ec:	82 81       	ldd	r24, Z+2	; 0x02
 1ee:	2d c0       	rjmp	.+90     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
			}
			if(cero_en_bit(&PINT,7))
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	89 e3       	ldi	r24, 0x39	; 57
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 1fa:	88 23       	and	r24, r24
 1fc:	f9 f0       	breq	.+62     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 1fe:	8f e4       	ldi	r24, 0x4F	; 79
 200:	93 ec       	ldi	r25, 0xC3	; 195
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 206:	00 c0       	rjmp	.+0      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 208:	00 00       	nop
			{
				_delay_ms(50);
				while(cero_en_bit(&PINT,7)){}
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	89 e3       	ldi	r24, 0x39	; 57
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 57 00 	call	0xae	; 0xae <cero_en_bit>
 214:	81 11       	cpse	r24, r1
 216:	f9 cf       	rjmp	.-14     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 218:	8f e4       	ldi	r24, 0x4F	; 79
 21a:	93 ec       	ldi	r25, 0xC3	; 195
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 222:	00 00       	nop
				_delay_ms(50);
				return regreso[i][3];
 224:	00 0f       	add	r16, r16
 226:	11 1f       	adc	r17, r17
 228:	00 0f       	add	r16, r16
 22a:	11 1f       	adc	r17, r17
 22c:	e1 e0       	ldi	r30, 0x01	; 1
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ec 0f       	add	r30, r28
 232:	fd 1f       	adc	r31, r29
 234:	e0 0f       	add	r30, r16
 236:	f1 1f       	adc	r31, r17
 238:	83 81       	ldd	r24, Z+3	; 0x03
 23a:	07 c0       	rjmp	.+14     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
uint8_t hasta_tecla(void)
{
	uint8_t regreso[4][4] = {{0,0,0,0},{13,3,6,9},{0,2,5,8},{10,1,4,7}};
	while(1)
	{
		for(int i=0;i<4;i++)
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	04 30       	cpi	r16, 0x04	; 4
 242:	11 05       	cpc	r17, r1
 244:	0c f4       	brge	.+2      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 246:	57 cf       	rjmp	.-338    	; 0xf6 <hasta_tecla+0x30>
 248:	53 cf       	rjmp	.-346    	; 0xf0 <hasta_tecla+0x2a>
				return regreso[i][3];
			}
		}
	}
	return 0;
}
 24a:	60 96       	adiw	r28, 0x10	; 16
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <main>:

int main(void)
{
	USART_Init(MYUBRR);
 260:	89 e1       	ldi	r24, 0x19	; 25
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	
	DDRT = 0x0F;
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	8a bb       	out	0x1a, r24	; 26
	PORTT = 0xFF;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8b bb       	out	0x1b, r24	; 27
	
	uint8_t tecla;
	
	while (1)
	{
		tecla = hasta_tecla();
 270:	0e 94 63 00 	call	0xc6	; 0xc6 <hasta_tecla>
		USART_Transmit(tecla+48);
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
 27a:	fa cf       	rjmp	.-12     	; 0x270 <main+0x10>

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
