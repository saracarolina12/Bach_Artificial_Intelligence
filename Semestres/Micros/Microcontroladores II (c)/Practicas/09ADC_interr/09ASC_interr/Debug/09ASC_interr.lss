
09ASC_interr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000a82  00000b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800070  00800070  00000b26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000139b  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b1  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b1  00000000  00000000  000034bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  8a:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <saca_uno>:
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}


void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){ // al usarla, no olvidar el &
	*LUGAR=*LUGAR|(1<<BIT);
  92:	fc 01       	movw	r30, r24
  94:	40 81       	ld	r20, Z
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <saca_uno+0xe>
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <saca_uno+0xa>
  a4:	24 2b       	or	r18, r20
  a6:	20 83       	st	Z, r18
  a8:	08 95       	ret

000000aa <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){// al usarla, no olvidar el &
  aa:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
  ac:	90 81       	ld	r25, Z
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <saca_cero+0xe>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <saca_cero+0xa>
  bc:	20 95       	com	r18
  be:	29 23       	and	r18, r25
  c0:	20 83       	st	Z, r18
  c2:	08 95       	ret

000000c4 <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribir? un dato
  c4:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
  da:	66 e0       	ldi	r22, 0x06	; 6
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	83 ec       	ldi	r24, 0xC3	; 195
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_wr_inst_ini+0x24>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_wr_inst_ini+0x2a>
  ee:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	85 e3       	ldi	r24, 0x35	; 53
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
  fa:	08 95       	ret

000000fc <LCD_wait_flag>:
}


void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo dem?s salida
  fc:	84 b3       	in	r24, 0x14	; 20
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	84 bb       	out	0x14, r24	; 20
	saca_cero(&PORTLCD,RS);// Instrucci?n
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	85 e3       	ldi	r24, 0x35	; 53
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	85 e3       	ldi	r24, 0x35	; 53
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	85 e3       	ldi	r24, 0x35	; 53
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 120:	83 ec       	ldi	r24, 0xC3	; 195
 122:	99 e0       	ldi	r25, 0x09	; 9
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_wait_flag+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_wait_flag+0x2e>
 12a:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
		if(isSet(PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 136:	9b 99       	sbic	0x13, 3	; 19
 138:	15 c0       	rjmp	.+42     	; 0x164 <LCD_wait_flag+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_wait_flag+0x40>
 140:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 142:	66 e0       	ldi	r22, 0x06	; 6
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	83 ec       	ldi	r24, 0xC3	; 195
 14e:	99 e0       	ldi	r25, 0x09	; 9
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_wait_flag+0x54>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_wait_flag+0x5a>
 156:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 158:	66 e0       	ldi	r22, 0x06	; 6
 15a:	85 e3       	ldi	r24, 0x35	; 53
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	}
 162:	d9 cf       	rjmp	.-78     	; 0x116 <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	85 e3       	ldi	r24, 0x35	; 53
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_wait_flag+0x76>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_wait_flag+0x7c>
 178:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	85 e3       	ldi	r24, 0x35	; 53
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	85 e3       	ldi	r24, 0x35	; 53
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 18e:	65 e0       	ldi	r22, 0x05	; 5
 190:	85 e3       	ldi	r24, 0x35	; 53
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 198:	84 b3       	in	r24, 0x14	; 20
 19a:	8f 67       	ori	r24, 0x7F	; 127
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	08 95       	ret

000001a0 <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribir? un dato
 1a4:	82 95       	swap	r24
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	85 bb       	out	0x15, r24	; 21
	saca_uno(&PORTLCD,RS);
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	85 e3       	ldi	r24, 0x35	; 53
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 1c8:	83 ec       	ldi	r24, 0xC3	; 195
 1ca:	99 e0       	ldi	r25, 0x09	; 9
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_wr_char+0x2c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_wr_char+0x32>
 1d2:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1d4:	66 e0       	ldi	r22, 0x06	; 6
 1d6:	85 e3       	ldi	r24, 0x35	; 53
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribir? un dato
 1de:	cf 70       	andi	r28, 0x0F	; 15
 1e0:	c5 bb       	out	0x15, r28	; 21
	saca_uno(&PORTLCD,RS);
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	85 e3       	ldi	r24, 0x35	; 53
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	85 e3       	ldi	r24, 0x35	; 53
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 200:	83 ec       	ldi	r24, 0xC3	; 195
 202:	99 e0       	ldi	r25, 0x09	; 9
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 208:	00 c0       	rjmp	.+0      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 20c:	66 e0       	ldi	r22, 0x06	; 6
 20e:	85 e3       	ldi	r24, 0x35	; 53
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RS);
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	85 e3       	ldi	r24, 0x35	; 53
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 220:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_wait_flag>
	
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <LCD_wr_string>:

void LCD_wr_lineTwo(volatile uint8_t *b){
	LCD_wr_instruction(0b11000000);
	LCD_wr_string(b);
}
void LCD_wr_string(volatile uint8_t *s){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c=*s++)){
 22e:	03 c0       	rjmp	.+6      	; 0x236 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 230:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_wr_char>
	LCD_wr_instruction(0b11000000);
	LCD_wr_string(b);
}
void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
 234:	fe 01       	movw	r30, r28
 236:	ef 01       	movw	r28, r30
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	80 81       	ld	r24, Z
 23c:	81 11       	cpse	r24, r1
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa de la instrucci?n
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribir? un dato
 24a:	82 95       	swap	r24
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	85 e3       	ldi	r24, 0x35	; 53
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 25a:	65 e0       	ldi	r22, 0x05	; 5
 25c:	85 e3       	ldi	r24, 0x35	; 53
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 264:	66 e0       	ldi	r22, 0x06	; 6
 266:	85 e3       	ldi	r24, 0x35	; 53
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 26e:	83 ec       	ldi	r24, 0xC3	; 195
 270:	99 e0       	ldi	r25, 0x09	; 9
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_wr_instruction+0x2c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_wr_instruction+0x32>
 278:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 27a:	66 e0       	ldi	r22, 0x06	; 6
 27c:	85 e3       	ldi	r24, 0x35	; 53
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa de la instrucci?n
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribir? un dato
 284:	cf 70       	andi	r28, 0x0F	; 15
 286:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	85 e3       	ldi	r24, 0x35	; 53
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 292:	65 e0       	ldi	r22, 0x05	; 5
 294:	85 e3       	ldi	r24, 0x35	; 53
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 29c:	66 e0       	ldi	r22, 0x06	; 6
 29e:	85 e3       	ldi	r24, 0x35	; 53
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 2a6:	83 ec       	ldi	r24, 0xC3	; 195
 2a8:	99 e0       	ldi	r25, 0x09	; 9
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_wr_instruction+0x64>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_wr_instruction+0x6a>
 2b0:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	85 e3       	ldi	r24, 0x35	; 53
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 2bc:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_wait_flag>
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LCD_wr_lineTwo>:
		ADCSRA|=(1 << ADSC);//inicia una nueva conversi�n
	}
	else ADCSRA|=(1 << ADSC);//inicia una nueva conversi�n
}

void LCD_wr_lineTwo(volatile uint8_t *b){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	LCD_wr_instruction(0b11000000);
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_string(b);
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 14 01 	call	0x228	; 0x228 <LCD_wr_string>
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <__vector_14>:
	
	while (1){}
	
}

ISR(ADC_vect){ //entra aqu� solito despu�s de la interrupci�n
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	rej = ADC;
 2fe:	24 b1       	in	r18, 0x04	; 4
 300:	35 b1       	in	r19, 0x05	; 5
 302:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <rej+0x1>
 306:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <rej>
	if(lastVal != rej){ //s�lo cambiar el n�mero en pantalla si ha cambiado
 30a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <lastVal>
 30e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <lastVal+0x1>
 312:	28 17       	cp	r18, r24
 314:	39 07       	cpc	r19, r25
 316:	79 f1       	breq	.+94     	; 0x376 <__vector_14+0x9a>
		lastVal = rej; //respaldo 
 318:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <lastVal+0x1>
 31c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <lastVal>
		uint16_t u = (float)(rej/adcRange);
 320:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 324:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
		uint16_t Udec = (float)(rej*10/adcRange);
 328:	c9 01       	movw	r24, r18
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	82 0f       	add	r24, r18
 33c:	93 1f       	adc	r25, r19
 33e:	0e 94 41 02 	call	0x482	; 0x482 <__udivmodhi4>
		uint16_t Ddec = (float)(rej*100/adcRange);
		///sprintf(dos, "%d.%d%d", u%10, Udec%10, Ddec%10);
		sprintf(dos, "%d", Udec);
 342:	7f 93       	push	r23
 344:	6f 93       	push	r22
 346:	84 e6       	ldi	r24, 0x64	; 100
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	83 e7       	ldi	r24, 0x73	; 115
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
		LCD_wr_lineTwo(dos);
 35a:	83 e7       	ldi	r24, 0x73	; 115
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_wr_lineTwo>
		ADCSRA|=(1 << ADSC);//inicia una nueva conversi�n
 362:	86 b1       	in	r24, 0x06	; 6
 364:	80 64       	ori	r24, 0x40	; 64
 366:	86 b9       	out	0x06, r24	; 6
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	03 c0       	rjmp	.+6      	; 0x37c <__vector_14+0xa0>
	}
	else ADCSRA|=(1 << ADSC);//inicia una nueva conversi�n
 376:	86 b1       	in	r24, 0x06	; 6
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	86 b9       	out	0x06, r24	; 6
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <LCD_wr_lines>:
		LCD_wr_char(c);
	}
}


void LCD_wr_lines(uint8_t *a, uint8_t *b){
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	8c 01       	movw	r16, r24
 3a8:	eb 01       	movw	r28, r22
	LCD_wr_instruction(LCD_Cmd_Clear);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Home);
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_string(a);
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 14 01 	call	0x228	; 0x228 <LCD_wr_string>
	LCD_wr_instruction(0b11000000);
 3bc:	80 ec       	ldi	r24, 0xC0	; 192
 3be:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_string(b);
 3c2:	ce 01       	movw	r24, r28
 3c4:	0e 94 14 01 	call	0x228	; 0x228 <LCD_wr_string>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <LCD_init>:
void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 3d2:	8f e7       	ldi	r24, 0x7F	; 127
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	85 ea       	ldi	r24, 0xA5	; 165
 3d8:	9e e0       	ldi	r25, 0x0E	; 14
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_init+0x8>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_init+0xe>
 3e0:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 3e8:	81 ee       	ldi	r24, 0xE1	; 225
 3ea:	94 e0       	ldi	r25, 0x04	; 4
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_init+0x1a>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_init+0x20>
 3f2:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	91 e2       	ldi	r25, 0x21	; 33
 3fc:	9a 95       	dec	r25
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_init+0x2a>
 400:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 408:	81 e2       	ldi	r24, 0x21	; 33
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 40e:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 416:	91 e2       	ldi	r25, 0x21	; 33
 418:	9a 95       	dec	r25
 41a:	f1 f7       	brne	.-4      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 41c:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
 41e:	88 e2       	ldi	r24, 0x28	; 40
 420:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	0e 94 23 01 	call	0x246	; 0x246 <LCD_wr_instruction>
 43c:	08 95       	ret

0000043e <main>:
}

uint8_t cont = 0;
int main(void)
{
	LCD_init();
 43e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_init>
	if(cont == 0){
 442:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 446:	81 11       	cpse	r24, r1
 448:	0f c0       	rjmp	.+30     	; 0x468 <__stack+0x9>
		 sprintf(uno, "Voltaje");
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	e7 e6       	ldi	r30, 0x67	; 103
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	a4 e8       	ldi	r26, 0x84	; 132
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	01 90       	ld	r0, Z+
 456:	0d 92       	st	X+, r0
 458:	8a 95       	dec	r24
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x16>
		 LCD_wr_lines(uno,dos);
 45c:	63 e7       	ldi	r22, 0x73	; 115
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	84 e8       	ldi	r24, 0x84	; 132
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_wr_lines>
	}
	
	//pruebas
	DDRD = 0;
 468:	11 ba       	out	0x11, r1	; 17
	
	//ADC
	ADMUX =     0b01000111;
 46a:	87 e4       	ldi	r24, 0x47	; 71
 46c:	87 b9       	out	0x07, r24	; 7
	SFIOR =     0b00000000;
 46e:	10 be       	out	0x30, r1	; 48
	ADCSRA =    0b10011101; //4 MHz, Fdiv = 32 CON INTERRUPCIONES
 470:	8d e9       	ldi	r24, 0x9D	; 157
 472:	86 b9       	out	0x06, r24	; 6
	DDRA =      0;
 474:	1a ba       	out	0x1a, r1	; 26
	PORTA =     0b00000000; //ADC doesnt need pull up
 476:	1b ba       	out	0x1b, r1	; 27
	sei();
 478:	78 94       	sei
	ADCSRA |= (1<<ADSC); //le digo que inicie
 47a:	86 b1       	in	r24, 0x06	; 6
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	86 b9       	out	0x06, r24	; 6
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stack+0x21>

00000482 <__udivmodhi4>:
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	51 e1       	ldi	r21, 0x11	; 17
 488:	07 c0       	rjmp	.+14     	; 0x498 <__udivmodhi4_ep>

0000048a <__udivmodhi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	a6 17       	cp	r26, r22
 490:	b7 07       	cpc	r27, r23
 492:	10 f0       	brcs	.+4      	; 0x498 <__udivmodhi4_ep>
 494:	a6 1b       	sub	r26, r22
 496:	b7 0b       	sbc	r27, r23

00000498 <__udivmodhi4_ep>:
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	5a 95       	dec	r21
 49e:	a9 f7       	brne	.-22     	; 0x48a <__udivmodhi4_loop>
 4a0:	80 95       	com	r24
 4a2:	90 95       	com	r25
 4a4:	bc 01       	movw	r22, r24
 4a6:	cd 01       	movw	r24, r26
 4a8:	08 95       	ret

000004aa <sprintf>:
 4aa:	ae e0       	ldi	r26, 0x0E	; 14
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	eb e5       	ldi	r30, 0x5B	; 91
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
 4b2:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__prologue_saves__+0x1c>
 4b6:	0d 89       	ldd	r16, Y+21	; 0x15
 4b8:	1e 89       	ldd	r17, Y+22	; 0x16
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	8c 83       	std	Y+4, r24	; 0x04
 4be:	1a 83       	std	Y+2, r17	; 0x02
 4c0:	09 83       	std	Y+1, r16	; 0x01
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	9f e7       	ldi	r25, 0x7F	; 127
 4c6:	9e 83       	std	Y+6, r25	; 0x06
 4c8:	8d 83       	std	Y+5, r24	; 0x05
 4ca:	ae 01       	movw	r20, r28
 4cc:	47 5e       	subi	r20, 0xE7	; 231
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	6f 89       	ldd	r22, Y+23	; 0x17
 4d2:	78 8d       	ldd	r23, Y+24	; 0x18
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <vfprintf>
 4dc:	ef 81       	ldd	r30, Y+7	; 0x07
 4de:	f8 85       	ldd	r31, Y+8	; 0x08
 4e0:	e0 0f       	add	r30, r16
 4e2:	f1 1f       	adc	r31, r17
 4e4:	10 82       	st	Z, r1
 4e6:	2e 96       	adiw	r28, 0x0e	; 14
 4e8:	e4 e0       	ldi	r30, 0x04	; 4
 4ea:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__epilogue_restores__+0x1c>

000004ee <vfprintf>:
 4ee:	ab e0       	ldi	r26, 0x0B	; 11
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ed e7       	ldi	r30, 0x7D	; 125
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__prologue_saves__>
 4fa:	6c 01       	movw	r12, r24
 4fc:	7b 01       	movw	r14, r22
 4fe:	8a 01       	movw	r16, r20
 500:	fc 01       	movw	r30, r24
 502:	17 82       	std	Z+7, r1	; 0x07
 504:	16 82       	std	Z+6, r1	; 0x06
 506:	83 81       	ldd	r24, Z+3	; 0x03
 508:	81 ff       	sbrs	r24, 1
 50a:	cc c1       	rjmp	.+920    	; 0x8a4 <vfprintf+0x3b6>
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	3c 01       	movw	r6, r24
 512:	f6 01       	movw	r30, r12
 514:	93 81       	ldd	r25, Z+3	; 0x03
 516:	f7 01       	movw	r30, r14
 518:	93 fd       	sbrc	r25, 3
 51a:	85 91       	lpm	r24, Z+
 51c:	93 ff       	sbrs	r25, 3
 51e:	81 91       	ld	r24, Z+
 520:	7f 01       	movw	r14, r30
 522:	88 23       	and	r24, r24
 524:	09 f4       	brne	.+2      	; 0x528 <vfprintf+0x3a>
 526:	ba c1       	rjmp	.+884    	; 0x89c <vfprintf+0x3ae>
 528:	85 32       	cpi	r24, 0x25	; 37
 52a:	39 f4       	brne	.+14     	; 0x53a <vfprintf+0x4c>
 52c:	93 fd       	sbrc	r25, 3
 52e:	85 91       	lpm	r24, Z+
 530:	93 ff       	sbrs	r25, 3
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	29 f4       	brne	.+10     	; 0x544 <vfprintf+0x56>
 53a:	b6 01       	movw	r22, r12
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 542:	e7 cf       	rjmp	.-50     	; 0x512 <vfprintf+0x24>
 544:	91 2c       	mov	r9, r1
 546:	21 2c       	mov	r2, r1
 548:	31 2c       	mov	r3, r1
 54a:	ff e1       	ldi	r31, 0x1F	; 31
 54c:	f3 15       	cp	r31, r3
 54e:	d8 f0       	brcs	.+54     	; 0x586 <vfprintf+0x98>
 550:	8b 32       	cpi	r24, 0x2B	; 43
 552:	79 f0       	breq	.+30     	; 0x572 <vfprintf+0x84>
 554:	38 f4       	brcc	.+14     	; 0x564 <vfprintf+0x76>
 556:	80 32       	cpi	r24, 0x20	; 32
 558:	79 f0       	breq	.+30     	; 0x578 <vfprintf+0x8a>
 55a:	83 32       	cpi	r24, 0x23	; 35
 55c:	a1 f4       	brne	.+40     	; 0x586 <vfprintf+0x98>
 55e:	23 2d       	mov	r18, r3
 560:	20 61       	ori	r18, 0x10	; 16
 562:	1d c0       	rjmp	.+58     	; 0x59e <vfprintf+0xb0>
 564:	8d 32       	cpi	r24, 0x2D	; 45
 566:	61 f0       	breq	.+24     	; 0x580 <vfprintf+0x92>
 568:	80 33       	cpi	r24, 0x30	; 48
 56a:	69 f4       	brne	.+26     	; 0x586 <vfprintf+0x98>
 56c:	23 2d       	mov	r18, r3
 56e:	21 60       	ori	r18, 0x01	; 1
 570:	16 c0       	rjmp	.+44     	; 0x59e <vfprintf+0xb0>
 572:	83 2d       	mov	r24, r3
 574:	82 60       	ori	r24, 0x02	; 2
 576:	38 2e       	mov	r3, r24
 578:	e3 2d       	mov	r30, r3
 57a:	e4 60       	ori	r30, 0x04	; 4
 57c:	3e 2e       	mov	r3, r30
 57e:	2a c0       	rjmp	.+84     	; 0x5d4 <vfprintf+0xe6>
 580:	f3 2d       	mov	r31, r3
 582:	f8 60       	ori	r31, 0x08	; 8
 584:	1d c0       	rjmp	.+58     	; 0x5c0 <vfprintf+0xd2>
 586:	37 fc       	sbrc	r3, 7
 588:	2d c0       	rjmp	.+90     	; 0x5e4 <vfprintf+0xf6>
 58a:	20 ed       	ldi	r18, 0xD0	; 208
 58c:	28 0f       	add	r18, r24
 58e:	2a 30       	cpi	r18, 0x0A	; 10
 590:	40 f0       	brcs	.+16     	; 0x5a2 <vfprintf+0xb4>
 592:	8e 32       	cpi	r24, 0x2E	; 46
 594:	b9 f4       	brne	.+46     	; 0x5c4 <vfprintf+0xd6>
 596:	36 fc       	sbrc	r3, 6
 598:	81 c1       	rjmp	.+770    	; 0x89c <vfprintf+0x3ae>
 59a:	23 2d       	mov	r18, r3
 59c:	20 64       	ori	r18, 0x40	; 64
 59e:	32 2e       	mov	r3, r18
 5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <vfprintf+0xe6>
 5a2:	36 fe       	sbrs	r3, 6
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <vfprintf+0xc4>
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	98 9e       	mul	r9, r24
 5aa:	20 0d       	add	r18, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	92 2e       	mov	r9, r18
 5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <vfprintf+0xe6>
 5b2:	ea e0       	ldi	r30, 0x0A	; 10
 5b4:	2e 9e       	mul	r2, r30
 5b6:	20 0d       	add	r18, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	22 2e       	mov	r2, r18
 5bc:	f3 2d       	mov	r31, r3
 5be:	f0 62       	ori	r31, 0x20	; 32
 5c0:	3f 2e       	mov	r3, r31
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <vfprintf+0xe6>
 5c4:	8c 36       	cpi	r24, 0x6C	; 108
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <vfprintf+0xe2>
 5c8:	83 2d       	mov	r24, r3
 5ca:	80 68       	ori	r24, 0x80	; 128
 5cc:	38 2e       	mov	r3, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <vfprintf+0xe6>
 5d0:	88 36       	cpi	r24, 0x68	; 104
 5d2:	41 f4       	brne	.+16     	; 0x5e4 <vfprintf+0xf6>
 5d4:	f7 01       	movw	r30, r14
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	7f 01       	movw	r14, r30
 5e0:	81 11       	cpse	r24, r1
 5e2:	b3 cf       	rjmp	.-154    	; 0x54a <vfprintf+0x5c>
 5e4:	98 2f       	mov	r25, r24
 5e6:	9f 7d       	andi	r25, 0xDF	; 223
 5e8:	95 54       	subi	r25, 0x45	; 69
 5ea:	93 30       	cpi	r25, 0x03	; 3
 5ec:	28 f4       	brcc	.+10     	; 0x5f8 <vfprintf+0x10a>
 5ee:	0c 5f       	subi	r16, 0xFC	; 252
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	9f e3       	ldi	r25, 0x3F	; 63
 5f4:	99 83       	std	Y+1, r25	; 0x01
 5f6:	0d c0       	rjmp	.+26     	; 0x612 <vfprintf+0x124>
 5f8:	83 36       	cpi	r24, 0x63	; 99
 5fa:	31 f0       	breq	.+12     	; 0x608 <vfprintf+0x11a>
 5fc:	83 37       	cpi	r24, 0x73	; 115
 5fe:	71 f0       	breq	.+28     	; 0x61c <vfprintf+0x12e>
 600:	83 35       	cpi	r24, 0x53	; 83
 602:	09 f0       	breq	.+2      	; 0x606 <vfprintf+0x118>
 604:	59 c0       	rjmp	.+178    	; 0x6b8 <vfprintf+0x1ca>
 606:	21 c0       	rjmp	.+66     	; 0x64a <vfprintf+0x15c>
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	89 83       	std	Y+1, r24	; 0x01
 60e:	0e 5f       	subi	r16, 0xFE	; 254
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	88 24       	eor	r8, r8
 614:	83 94       	inc	r8
 616:	91 2c       	mov	r9, r1
 618:	53 01       	movw	r10, r6
 61a:	13 c0       	rjmp	.+38     	; 0x642 <vfprintf+0x154>
 61c:	28 01       	movw	r4, r16
 61e:	f2 e0       	ldi	r31, 0x02	; 2
 620:	4f 0e       	add	r4, r31
 622:	51 1c       	adc	r5, r1
 624:	f8 01       	movw	r30, r16
 626:	a0 80       	ld	r10, Z
 628:	b1 80       	ldd	r11, Z+1	; 0x01
 62a:	36 fe       	sbrs	r3, 6
 62c:	03 c0       	rjmp	.+6      	; 0x634 <vfprintf+0x146>
 62e:	69 2d       	mov	r22, r9
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <vfprintf+0x14a>
 634:	6f ef       	ldi	r22, 0xFF	; 255
 636:	7f ef       	ldi	r23, 0xFF	; 255
 638:	c5 01       	movw	r24, r10
 63a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <strnlen>
 63e:	4c 01       	movw	r8, r24
 640:	82 01       	movw	r16, r4
 642:	f3 2d       	mov	r31, r3
 644:	ff 77       	andi	r31, 0x7F	; 127
 646:	3f 2e       	mov	r3, r31
 648:	16 c0       	rjmp	.+44     	; 0x676 <vfprintf+0x188>
 64a:	28 01       	movw	r4, r16
 64c:	22 e0       	ldi	r18, 0x02	; 2
 64e:	42 0e       	add	r4, r18
 650:	51 1c       	adc	r5, r1
 652:	f8 01       	movw	r30, r16
 654:	a0 80       	ld	r10, Z
 656:	b1 80       	ldd	r11, Z+1	; 0x01
 658:	36 fe       	sbrs	r3, 6
 65a:	03 c0       	rjmp	.+6      	; 0x662 <vfprintf+0x174>
 65c:	69 2d       	mov	r22, r9
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <vfprintf+0x178>
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	7f ef       	ldi	r23, 0xFF	; 255
 666:	c5 01       	movw	r24, r10
 668:	0e 94 58 04 	call	0x8b0	; 0x8b0 <strnlen_P>
 66c:	4c 01       	movw	r8, r24
 66e:	f3 2d       	mov	r31, r3
 670:	f0 68       	ori	r31, 0x80	; 128
 672:	3f 2e       	mov	r3, r31
 674:	82 01       	movw	r16, r4
 676:	33 fc       	sbrc	r3, 3
 678:	1b c0       	rjmp	.+54     	; 0x6b0 <vfprintf+0x1c2>
 67a:	82 2d       	mov	r24, r2
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	88 16       	cp	r8, r24
 680:	99 06       	cpc	r9, r25
 682:	b0 f4       	brcc	.+44     	; 0x6b0 <vfprintf+0x1c2>
 684:	b6 01       	movw	r22, r12
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 68e:	2a 94       	dec	r2
 690:	f4 cf       	rjmp	.-24     	; 0x67a <vfprintf+0x18c>
 692:	f5 01       	movw	r30, r10
 694:	37 fc       	sbrc	r3, 7
 696:	85 91       	lpm	r24, Z+
 698:	37 fe       	sbrs	r3, 7
 69a:	81 91       	ld	r24, Z+
 69c:	5f 01       	movw	r10, r30
 69e:	b6 01       	movw	r22, r12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 6a6:	21 10       	cpse	r2, r1
 6a8:	2a 94       	dec	r2
 6aa:	21 e0       	ldi	r18, 0x01	; 1
 6ac:	82 1a       	sub	r8, r18
 6ae:	91 08       	sbc	r9, r1
 6b0:	81 14       	cp	r8, r1
 6b2:	91 04       	cpc	r9, r1
 6b4:	71 f7       	brne	.-36     	; 0x692 <vfprintf+0x1a4>
 6b6:	e8 c0       	rjmp	.+464    	; 0x888 <vfprintf+0x39a>
 6b8:	84 36       	cpi	r24, 0x64	; 100
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <vfprintf+0x1d2>
 6bc:	89 36       	cpi	r24, 0x69	; 105
 6be:	41 f5       	brne	.+80     	; 0x710 <vfprintf+0x222>
 6c0:	f8 01       	movw	r30, r16
 6c2:	37 fe       	sbrs	r3, 7
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <vfprintf+0x1e6>
 6c6:	60 81       	ld	r22, Z
 6c8:	71 81       	ldd	r23, Z+1	; 0x01
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	0c 5f       	subi	r16, 0xFC	; 252
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0x1f6>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	07 2e       	mov	r0, r23
 6da:	00 0c       	add	r0, r0
 6dc:	88 0b       	sbc	r24, r24
 6de:	99 0b       	sbc	r25, r25
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	f3 2d       	mov	r31, r3
 6e6:	ff 76       	andi	r31, 0x6F	; 111
 6e8:	3f 2e       	mov	r3, r31
 6ea:	97 ff       	sbrs	r25, 7
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <vfprintf+0x212>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	f0 68       	ori	r31, 0x80	; 128
 6fe:	3f 2e       	mov	r3, r31
 700:	2a e0       	ldi	r18, 0x0A	; 10
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	a3 01       	movw	r20, r6
 706:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 70a:	88 2e       	mov	r8, r24
 70c:	86 18       	sub	r8, r6
 70e:	45 c0       	rjmp	.+138    	; 0x79a <vfprintf+0x2ac>
 710:	85 37       	cpi	r24, 0x75	; 117
 712:	31 f4       	brne	.+12     	; 0x720 <vfprintf+0x232>
 714:	23 2d       	mov	r18, r3
 716:	2f 7e       	andi	r18, 0xEF	; 239
 718:	b2 2e       	mov	r11, r18
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	25 c0       	rjmp	.+74     	; 0x76a <vfprintf+0x27c>
 720:	93 2d       	mov	r25, r3
 722:	99 7f       	andi	r25, 0xF9	; 249
 724:	b9 2e       	mov	r11, r25
 726:	8f 36       	cpi	r24, 0x6F	; 111
 728:	c1 f0       	breq	.+48     	; 0x75a <vfprintf+0x26c>
 72a:	18 f4       	brcc	.+6      	; 0x732 <vfprintf+0x244>
 72c:	88 35       	cpi	r24, 0x58	; 88
 72e:	79 f0       	breq	.+30     	; 0x74e <vfprintf+0x260>
 730:	b5 c0       	rjmp	.+362    	; 0x89c <vfprintf+0x3ae>
 732:	80 37       	cpi	r24, 0x70	; 112
 734:	19 f0       	breq	.+6      	; 0x73c <vfprintf+0x24e>
 736:	88 37       	cpi	r24, 0x78	; 120
 738:	21 f0       	breq	.+8      	; 0x742 <vfprintf+0x254>
 73a:	b0 c0       	rjmp	.+352    	; 0x89c <vfprintf+0x3ae>
 73c:	e9 2f       	mov	r30, r25
 73e:	e0 61       	ori	r30, 0x10	; 16
 740:	be 2e       	mov	r11, r30
 742:	b4 fe       	sbrs	r11, 4
 744:	0d c0       	rjmp	.+26     	; 0x760 <vfprintf+0x272>
 746:	fb 2d       	mov	r31, r11
 748:	f4 60       	ori	r31, 0x04	; 4
 74a:	bf 2e       	mov	r11, r31
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x272>
 74e:	34 fe       	sbrs	r3, 4
 750:	0a c0       	rjmp	.+20     	; 0x766 <vfprintf+0x278>
 752:	29 2f       	mov	r18, r25
 754:	26 60       	ori	r18, 0x06	; 6
 756:	b2 2e       	mov	r11, r18
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0x278>
 75a:	28 e0       	ldi	r18, 0x08	; 8
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	05 c0       	rjmp	.+10     	; 0x76a <vfprintf+0x27c>
 760:	20 e1       	ldi	r18, 0x10	; 16
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	32 e0       	ldi	r19, 0x02	; 2
 76a:	f8 01       	movw	r30, r16
 76c:	b7 fe       	sbrs	r11, 7
 76e:	07 c0       	rjmp	.+14     	; 0x77e <vfprintf+0x290>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	82 81       	ldd	r24, Z+2	; 0x02
 776:	93 81       	ldd	r25, Z+3	; 0x03
 778:	0c 5f       	subi	r16, 0xFC	; 252
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0x29c>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	a3 01       	movw	r20, r6
 78c:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 790:	88 2e       	mov	r8, r24
 792:	86 18       	sub	r8, r6
 794:	fb 2d       	mov	r31, r11
 796:	ff 77       	andi	r31, 0x7F	; 127
 798:	3f 2e       	mov	r3, r31
 79a:	36 fe       	sbrs	r3, 6
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <vfprintf+0x2ca>
 79e:	23 2d       	mov	r18, r3
 7a0:	2e 7f       	andi	r18, 0xFE	; 254
 7a2:	a2 2e       	mov	r10, r18
 7a4:	89 14       	cp	r8, r9
 7a6:	58 f4       	brcc	.+22     	; 0x7be <vfprintf+0x2d0>
 7a8:	34 fe       	sbrs	r3, 4
 7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <vfprintf+0x2d4>
 7ac:	32 fc       	sbrc	r3, 2
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <vfprintf+0x2d4>
 7b0:	83 2d       	mov	r24, r3
 7b2:	8e 7e       	andi	r24, 0xEE	; 238
 7b4:	a8 2e       	mov	r10, r24
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x2d4>
 7b8:	b8 2c       	mov	r11, r8
 7ba:	a3 2c       	mov	r10, r3
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x2d6>
 7be:	b8 2c       	mov	r11, r8
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x2d6>
 7c2:	b9 2c       	mov	r11, r9
 7c4:	a4 fe       	sbrs	r10, 4
 7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <vfprintf+0x2f8>
 7c8:	fe 01       	movw	r30, r28
 7ca:	e8 0d       	add	r30, r8
 7cc:	f1 1d       	adc	r31, r1
 7ce:	80 81       	ld	r24, Z
 7d0:	80 33       	cpi	r24, 0x30	; 48
 7d2:	21 f4       	brne	.+8      	; 0x7dc <vfprintf+0x2ee>
 7d4:	9a 2d       	mov	r25, r10
 7d6:	99 7e       	andi	r25, 0xE9	; 233
 7d8:	a9 2e       	mov	r10, r25
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x300>
 7dc:	a2 fe       	sbrs	r10, 2
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x2fe>
 7e0:	b3 94       	inc	r11
 7e2:	b3 94       	inc	r11
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <vfprintf+0x300>
 7e6:	8a 2d       	mov	r24, r10
 7e8:	86 78       	andi	r24, 0x86	; 134
 7ea:	09 f0       	breq	.+2      	; 0x7ee <vfprintf+0x300>
 7ec:	b3 94       	inc	r11
 7ee:	a3 fc       	sbrc	r10, 3
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <vfprintf+0x326>
 7f2:	a0 fe       	sbrs	r10, 0
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x314>
 7f6:	b2 14       	cp	r11, r2
 7f8:	88 f4       	brcc	.+34     	; 0x81c <vfprintf+0x32e>
 7fa:	28 0c       	add	r2, r8
 7fc:	92 2c       	mov	r9, r2
 7fe:	9b 18       	sub	r9, r11
 800:	0e c0       	rjmp	.+28     	; 0x81e <vfprintf+0x330>
 802:	b2 14       	cp	r11, r2
 804:	60 f4       	brcc	.+24     	; 0x81e <vfprintf+0x330>
 806:	b6 01       	movw	r22, r12
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 810:	b3 94       	inc	r11
 812:	f7 cf       	rjmp	.-18     	; 0x802 <vfprintf+0x314>
 814:	b2 14       	cp	r11, r2
 816:	18 f4       	brcc	.+6      	; 0x81e <vfprintf+0x330>
 818:	2b 18       	sub	r2, r11
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x332>
 81c:	98 2c       	mov	r9, r8
 81e:	21 2c       	mov	r2, r1
 820:	a4 fe       	sbrs	r10, 4
 822:	10 c0       	rjmp	.+32     	; 0x844 <vfprintf+0x356>
 824:	b6 01       	movw	r22, r12
 826:	80 e3       	ldi	r24, 0x30	; 48
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 82e:	a2 fe       	sbrs	r10, 2
 830:	17 c0       	rjmp	.+46     	; 0x860 <vfprintf+0x372>
 832:	a1 fc       	sbrc	r10, 1
 834:	03 c0       	rjmp	.+6      	; 0x83c <vfprintf+0x34e>
 836:	88 e7       	ldi	r24, 0x78	; 120
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x352>
 83c:	88 e5       	ldi	r24, 0x58	; 88
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	b6 01       	movw	r22, r12
 842:	0c c0       	rjmp	.+24     	; 0x85c <vfprintf+0x36e>
 844:	8a 2d       	mov	r24, r10
 846:	86 78       	andi	r24, 0x86	; 134
 848:	59 f0       	breq	.+22     	; 0x860 <vfprintf+0x372>
 84a:	a1 fe       	sbrs	r10, 1
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x364>
 84e:	8b e2       	ldi	r24, 0x2B	; 43
 850:	01 c0       	rjmp	.+2      	; 0x854 <vfprintf+0x366>
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	a7 fc       	sbrc	r10, 7
 856:	8d e2       	ldi	r24, 0x2D	; 45
 858:	b6 01       	movw	r22, r12
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 860:	89 14       	cp	r8, r9
 862:	38 f4       	brcc	.+14     	; 0x872 <vfprintf+0x384>
 864:	b6 01       	movw	r22, r12
 866:	80 e3       	ldi	r24, 0x30	; 48
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 86e:	9a 94       	dec	r9
 870:	f7 cf       	rjmp	.-18     	; 0x860 <vfprintf+0x372>
 872:	8a 94       	dec	r8
 874:	f3 01       	movw	r30, r6
 876:	e8 0d       	add	r30, r8
 878:	f1 1d       	adc	r31, r1
 87a:	80 81       	ld	r24, Z
 87c:	b6 01       	movw	r22, r12
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 884:	81 10       	cpse	r8, r1
 886:	f5 cf       	rjmp	.-22     	; 0x872 <vfprintf+0x384>
 888:	22 20       	and	r2, r2
 88a:	09 f4       	brne	.+2      	; 0x88e <vfprintf+0x3a0>
 88c:	42 ce       	rjmp	.-892    	; 0x512 <vfprintf+0x24>
 88e:	b6 01       	movw	r22, r12
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 898:	2a 94       	dec	r2
 89a:	f6 cf       	rjmp	.-20     	; 0x888 <vfprintf+0x39a>
 89c:	f6 01       	movw	r30, r12
 89e:	86 81       	ldd	r24, Z+6	; 0x06
 8a0:	97 81       	ldd	r25, Z+7	; 0x07
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x3ba>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	2b 96       	adiw	r28, 0x0b	; 11
 8aa:	e2 e1       	ldi	r30, 0x12	; 18
 8ac:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__epilogue_restores__>

000008b0 <strnlen_P>:
 8b0:	fc 01       	movw	r30, r24
 8b2:	05 90       	lpm	r0, Z+
 8b4:	61 50       	subi	r22, 0x01	; 1
 8b6:	70 40       	sbci	r23, 0x00	; 0
 8b8:	01 10       	cpse	r0, r1
 8ba:	d8 f7       	brcc	.-10     	; 0x8b2 <strnlen_P+0x2>
 8bc:	80 95       	com	r24
 8be:	90 95       	com	r25
 8c0:	8e 0f       	add	r24, r30
 8c2:	9f 1f       	adc	r25, r31
 8c4:	08 95       	ret

000008c6 <strnlen>:
 8c6:	fc 01       	movw	r30, r24
 8c8:	61 50       	subi	r22, 0x01	; 1
 8ca:	70 40       	sbci	r23, 0x00	; 0
 8cc:	01 90       	ld	r0, Z+
 8ce:	01 10       	cpse	r0, r1
 8d0:	d8 f7       	brcc	.-10     	; 0x8c8 <strnlen+0x2>
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	8e 0f       	add	r24, r30
 8d8:	9f 1f       	adc	r25, r31
 8da:	08 95       	ret

000008dc <fputc>:
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	fb 01       	movw	r30, r22
 8e6:	23 81       	ldd	r18, Z+3	; 0x03
 8e8:	21 fd       	sbrc	r18, 1
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <fputc+0x16>
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	9f ef       	ldi	r25, 0xFF	; 255
 8f0:	2c c0       	rjmp	.+88     	; 0x94a <fputc+0x6e>
 8f2:	22 ff       	sbrs	r18, 2
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <fputc+0x46>
 8f6:	46 81       	ldd	r20, Z+6	; 0x06
 8f8:	57 81       	ldd	r21, Z+7	; 0x07
 8fa:	24 81       	ldd	r18, Z+4	; 0x04
 8fc:	35 81       	ldd	r19, Z+5	; 0x05
 8fe:	42 17       	cp	r20, r18
 900:	53 07       	cpc	r21, r19
 902:	44 f4       	brge	.+16     	; 0x914 <fputc+0x38>
 904:	a0 81       	ld	r26, Z
 906:	b1 81       	ldd	r27, Z+1	; 0x01
 908:	9d 01       	movw	r18, r26
 90a:	2f 5f       	subi	r18, 0xFF	; 255
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	31 83       	std	Z+1, r19	; 0x01
 910:	20 83       	st	Z, r18
 912:	8c 93       	st	X, r24
 914:	26 81       	ldd	r18, Z+6	; 0x06
 916:	37 81       	ldd	r19, Z+7	; 0x07
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	37 83       	std	Z+7, r19	; 0x07
 91e:	26 83       	std	Z+6, r18	; 0x06
 920:	14 c0       	rjmp	.+40     	; 0x94a <fputc+0x6e>
 922:	8b 01       	movw	r16, r22
 924:	ec 01       	movw	r28, r24
 926:	fb 01       	movw	r30, r22
 928:	00 84       	ldd	r0, Z+8	; 0x08
 92a:	f1 85       	ldd	r31, Z+9	; 0x09
 92c:	e0 2d       	mov	r30, r0
 92e:	09 95       	icall
 930:	89 2b       	or	r24, r25
 932:	e1 f6       	brne	.-72     	; 0x8ec <fputc+0x10>
 934:	d8 01       	movw	r26, r16
 936:	16 96       	adiw	r26, 0x06	; 6
 938:	8d 91       	ld	r24, X+
 93a:	9c 91       	ld	r25, X
 93c:	17 97       	sbiw	r26, 0x07	; 7
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	17 96       	adiw	r26, 0x07	; 7
 942:	9c 93       	st	X, r25
 944:	8e 93       	st	-X, r24
 946:	16 97       	sbiw	r26, 0x06	; 6
 948:	ce 01       	movw	r24, r28
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <__ultoa_invert>:
 954:	fa 01       	movw	r30, r20
 956:	aa 27       	eor	r26, r26
 958:	28 30       	cpi	r18, 0x08	; 8
 95a:	51 f1       	breq	.+84     	; 0x9b0 <__ultoa_invert+0x5c>
 95c:	20 31       	cpi	r18, 0x10	; 16
 95e:	81 f1       	breq	.+96     	; 0x9c0 <__ultoa_invert+0x6c>
 960:	e8 94       	clt
 962:	6f 93       	push	r22
 964:	6e 7f       	andi	r22, 0xFE	; 254
 966:	6e 5f       	subi	r22, 0xFE	; 254
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	af 4f       	sbci	r26, 0xFF	; 255
 970:	b1 e0       	ldi	r27, 0x01	; 1
 972:	3e d0       	rcall	.+124    	; 0x9f0 <__ultoa_invert+0x9c>
 974:	b4 e0       	ldi	r27, 0x04	; 4
 976:	3c d0       	rcall	.+120    	; 0x9f0 <__ultoa_invert+0x9c>
 978:	67 0f       	add	r22, r23
 97a:	78 1f       	adc	r23, r24
 97c:	89 1f       	adc	r24, r25
 97e:	9a 1f       	adc	r25, r26
 980:	a1 1d       	adc	r26, r1
 982:	68 0f       	add	r22, r24
 984:	79 1f       	adc	r23, r25
 986:	8a 1f       	adc	r24, r26
 988:	91 1d       	adc	r25, r1
 98a:	a1 1d       	adc	r26, r1
 98c:	6a 0f       	add	r22, r26
 98e:	71 1d       	adc	r23, r1
 990:	81 1d       	adc	r24, r1
 992:	91 1d       	adc	r25, r1
 994:	a1 1d       	adc	r26, r1
 996:	20 d0       	rcall	.+64     	; 0x9d8 <__ultoa_invert+0x84>
 998:	09 f4       	brne	.+2      	; 0x99c <__ultoa_invert+0x48>
 99a:	68 94       	set
 99c:	3f 91       	pop	r19
 99e:	2a e0       	ldi	r18, 0x0A	; 10
 9a0:	26 9f       	mul	r18, r22
 9a2:	11 24       	eor	r1, r1
 9a4:	30 19       	sub	r19, r0
 9a6:	30 5d       	subi	r19, 0xD0	; 208
 9a8:	31 93       	st	Z+, r19
 9aa:	de f6       	brtc	.-74     	; 0x962 <__ultoa_invert+0xe>
 9ac:	cf 01       	movw	r24, r30
 9ae:	08 95       	ret
 9b0:	46 2f       	mov	r20, r22
 9b2:	47 70       	andi	r20, 0x07	; 7
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	41 93       	st	Z+, r20
 9b8:	b3 e0       	ldi	r27, 0x03	; 3
 9ba:	0f d0       	rcall	.+30     	; 0x9da <__ultoa_invert+0x86>
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0x5c>
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <__ultoa_invert+0x58>
 9c0:	46 2f       	mov	r20, r22
 9c2:	4f 70       	andi	r20, 0x0F	; 15
 9c4:	40 5d       	subi	r20, 0xD0	; 208
 9c6:	4a 33       	cpi	r20, 0x3A	; 58
 9c8:	18 f0       	brcs	.+6      	; 0x9d0 <__ultoa_invert+0x7c>
 9ca:	49 5d       	subi	r20, 0xD9	; 217
 9cc:	31 fd       	sbrc	r19, 1
 9ce:	40 52       	subi	r20, 0x20	; 32
 9d0:	41 93       	st	Z+, r20
 9d2:	02 d0       	rcall	.+4      	; 0x9d8 <__ultoa_invert+0x84>
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__ultoa_invert+0x6c>
 9d6:	ea cf       	rjmp	.-44     	; 0x9ac <__ultoa_invert+0x58>
 9d8:	b4 e0       	ldi	r27, 0x04	; 4
 9da:	a6 95       	lsr	r26
 9dc:	97 95       	ror	r25
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	ba 95       	dec	r27
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__ultoa_invert+0x86>
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	61 05       	cpc	r22, r1
 9ec:	71 05       	cpc	r23, r1
 9ee:	08 95       	ret
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	0a 2e       	mov	r0, r26
 9f6:	06 94       	lsr	r0
 9f8:	57 95       	ror	r21
 9fa:	47 95       	ror	r20
 9fc:	37 95       	ror	r19
 9fe:	27 95       	ror	r18
 a00:	ba 95       	dec	r27
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__ultoa_invert+0xa2>
 a04:	62 0f       	add	r22, r18
 a06:	73 1f       	adc	r23, r19
 a08:	84 1f       	adc	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	a0 1d       	adc	r26, r0
 a0e:	08 95       	ret

00000a10 <__prologue_saves__>:
 a10:	2f 92       	push	r2
 a12:	3f 92       	push	r3
 a14:	4f 92       	push	r4
 a16:	5f 92       	push	r5
 a18:	6f 92       	push	r6
 a1a:	7f 92       	push	r7
 a1c:	8f 92       	push	r8
 a1e:	9f 92       	push	r9
 a20:	af 92       	push	r10
 a22:	bf 92       	push	r11
 a24:	cf 92       	push	r12
 a26:	df 92       	push	r13
 a28:	ef 92       	push	r14
 a2a:	ff 92       	push	r15
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	ca 1b       	sub	r28, r26
 a3a:	db 0b       	sbc	r29, r27
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	f8 94       	cli
 a40:	de bf       	out	0x3e, r29	; 62
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	cd bf       	out	0x3d, r28	; 61
 a46:	09 94       	ijmp

00000a48 <__epilogue_restores__>:
 a48:	2a 88       	ldd	r2, Y+18	; 0x12
 a4a:	39 88       	ldd	r3, Y+17	; 0x11
 a4c:	48 88       	ldd	r4, Y+16	; 0x10
 a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a50:	6e 84       	ldd	r6, Y+14	; 0x0e
 a52:	7d 84       	ldd	r7, Y+13	; 0x0d
 a54:	8c 84       	ldd	r8, Y+12	; 0x0c
 a56:	9b 84       	ldd	r9, Y+11	; 0x0b
 a58:	aa 84       	ldd	r10, Y+10	; 0x0a
 a5a:	b9 84       	ldd	r11, Y+9	; 0x09
 a5c:	c8 84       	ldd	r12, Y+8	; 0x08
 a5e:	df 80       	ldd	r13, Y+7	; 0x07
 a60:	ee 80       	ldd	r14, Y+6	; 0x06
 a62:	fd 80       	ldd	r15, Y+5	; 0x05
 a64:	0c 81       	ldd	r16, Y+4	; 0x04
 a66:	1b 81       	ldd	r17, Y+3	; 0x03
 a68:	aa 81       	ldd	r26, Y+2	; 0x02
 a6a:	b9 81       	ldd	r27, Y+1	; 0x01
 a6c:	ce 0f       	add	r28, r30
 a6e:	d1 1d       	adc	r29, r1
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	ed 01       	movw	r28, r26
 a7c:	08 95       	ret

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
