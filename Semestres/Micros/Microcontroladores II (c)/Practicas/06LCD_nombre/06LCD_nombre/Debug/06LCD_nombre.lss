
06LCD_nombre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000035a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fee  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ef  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000542  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  7a:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cero_en_bit>:
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
}
  82:	fc 01       	movw	r30, r24
  84:	80 81       	ld	r24, Z
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <cero_en_bit+0xc>
  8a:	95 95       	asr	r25
  8c:	87 95       	ror	r24
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <cero_en_bit+0x8>
  92:	f1 e0       	ldi	r31, 0x01	; 1
  94:	8f 27       	eor	r24, r31
  96:	81 70       	andi	r24, 0x01	; 1
  98:	08 95       	ret

0000009a <saca_uno>:
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
  9a:	fc 01       	movw	r30, r24
  9c:	40 81       	ld	r20, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <saca_uno+0xe>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <saca_uno+0xa>
  ac:	24 2b       	or	r18, r20
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
  b2:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
  b4:	90 81       	ld	r25, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <saca_cero+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <saca_cero+0xa>
  c4:	20 95       	com	r18
  c6:	29 23       	and	r18, r25
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){ 
	PORTLCD=instruccion; //Saco el dato y le digo que escribiré un dato
  cc:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	85 e3       	ldi	r24, 0x35	; 53
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_cero(&PORTLCD,RW);
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,E);
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_wr_inst_ini+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_wr_inst_ini+0x2a>
  f6:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
  f8:	66 e0       	ldi	r22, 0x06	; 6
  fa:	85 e3       	ldi	r24, 0x35	; 53
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
 102:	08 95       	ret

00000104 <LCD_wait_flag>:
}


void LCD_wait_flag(void){
//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
	saca_cero(&PORTLCD,RS);// Instrucción
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	85 e3       	ldi	r24, 0x35	; 53
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	85 e3       	ldi	r24, 0x35	; 53
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_wait_flag+0x28>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_wait_flag+0x2e>
 132:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);	
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	85 e3       	ldi	r24, 0x35	; 53
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
		if(cero_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para proteus, 0 para la vida real
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 41 00 	call	0x82	; 0x82 <cero_en_bit>
 148:	81 11       	cpse	r24, r1
 14a:	15 c0       	rjmp	.+42     	; 0x176 <LCD_wait_flag+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	93 e0       	ldi	r25, 0x03	; 3
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_wait_flag+0x4a>
 152:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 154:	66 e0       	ldi	r22, 0x06	; 6
 156:	85 e3       	ldi	r24, 0x35	; 53
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_wait_flag+0x5e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_wait_flag+0x64>
 168:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);	
 16a:	66 e0       	ldi	r22, 0x06	; 6
 16c:	85 e3       	ldi	r24, 0x35	; 53
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	}
 174:	d4 cf       	rjmp	.-88     	; 0x11e <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	85 e3       	ldi	r24, 0x35	; 53
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	99 e0       	ldi	r25, 0x09	; 9
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_wait_flag+0x80>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_wait_flag+0x86>
 18a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 18c:	66 e0       	ldi	r22, 0x06	; 6
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	85 e3       	ldi	r24, 0x35	; 53
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 1aa:	84 b3       	in	r24, 0x14	; 20
 1ac:	8f 67       	ori	r24, 0x7F	; 127
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	08 95       	ret

000001b2 <LCD_wr_char>:
	//LCD_wr_instruction(LCD_Cmd_ModeDcS); //Entry mode set ID S	
	LCD_wr_instruction(0b10000000); //posición 0 ->
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
	//saco la parte más significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribiré un dato
 1b6:	82 95       	swap	r24
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	85 bb       	out	0x15, r24	; 21
	saca_uno(&PORTLCD,RS);
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
	saca_cero(&PORTLCD,RW);
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	85 e3       	ldi	r24, 0x35	; 53
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,E);
 1d0:	66 e0       	ldi	r22, 0x06	; 6
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_wr_char+0x2c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_wr_char+0x32>
 1e4:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1e6:	66 e0       	ldi	r22, 0x06	; 6
 1e8:	85 e3       	ldi	r24, 0x35	; 53
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribiré un dato
 1f0:	cf 70       	andi	r28, 0x0F	; 15
 1f2:	c5 bb       	out	0x15, r28	; 21
	saca_uno(&PORTLCD,RS);
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	85 e3       	ldi	r24, 0x35	; 53
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
	saca_cero(&PORTLCD,RW);
 1fe:	65 e0       	ldi	r22, 0x05	; 5
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,E);
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 212:	83 ec       	ldi	r24, 0xC3	; 195
 214:	99 e0       	ldi	r25, 0x09	; 9
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21c:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	85 e3       	ldi	r24, 0x35	; 53
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_cero(&PORTLCD,RS);
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	LCD_wait_flag();
 232:	0e 94 82 00 	call	0x104	; 0x104 <LCD_wait_flag>
	
}
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <LCD_wr_string>:
	while (1)
	{
	}
}

void LCD_wr_string(volatile uint8_t *s){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c=*s++)){
 240:	03 c0       	rjmp	.+6      	; 0x248 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 242:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_wr_char>
	}
}

void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
 246:	fe 01       	movw	r30, r28
 248:	ef 01       	movw	r28, r30
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	80 81       	ld	r24, Z
 24e:	81 11       	cpse	r24, r1
 250:	f8 cf       	rjmp	.-16     	; 0x242 <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
	//saco la parte más significativa de la instrucción
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribiré un dato
 25c:	82 95       	swap	r24
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	85 e3       	ldi	r24, 0x35	; 53
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 26c:	65 e0       	ldi	r22, 0x05	; 5
 26e:	85 e3       	ldi	r24, 0x35	; 53
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,E);
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	85 e3       	ldi	r24, 0x35	; 53
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 280:	83 ec       	ldi	r24, 0xC3	; 195
 282:	99 e0       	ldi	r25, 0x09	; 9
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_wr_instruction+0x2c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_wr_instruction+0x32>
 28a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	85 e3       	ldi	r24, 0x35	; 53
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	//saco la parte menos significativa de la instrucción
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribiré un dato
 296:	cf 70       	andi	r28, 0x0F	; 15
 298:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	85 e3       	ldi	r24, 0x35	; 53
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_cero(&PORTLCD,RW);
 2a4:	65 e0       	ldi	r22, 0x05	; 5
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	saca_uno(&PORTLCD,E);
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	85 e3       	ldi	r24, 0x35	; 53
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 4d 00 	call	0x9a	; 0x9a <saca_uno>
 2b8:	83 ec       	ldi	r24, 0xC3	; 195
 2ba:	99 e0       	ldi	r25, 0x09	; 9
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_wr_instruction+0x64>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_wr_instruction+0x6a>
 2c2:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2c4:	66 e0       	ldi	r22, 0x06	; 6
 2c6:	85 e3       	ldi	r24, 0x35	; 53
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 59 00 	call	0xb2	; 0xb2 <saca_cero>
	LCD_wait_flag();
 2ce:	0e 94 82 00 	call	0x104	; 0x104 <LCD_wait_flag>
}
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCD_init>:
		LCD_wr_char(c);
	}
}

void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 2d6:	8f e7       	ldi	r24, 0x7F	; 127
 2d8:	84 bb       	out	0x14, r24	; 20
 2da:	85 ea       	ldi	r24, 0xA5	; 165
 2dc:	9e e0       	ldi	r25, 0x0E	; 14
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_init+0x8>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_init+0xe>
 2e4:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wr_inst_ini>
 2ec:	81 ee       	ldi	r24, 0xE1	; 225
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_init+0x1a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_init+0x20>
 2f6:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	91 e2       	ldi	r25, 0x21	; 33
 300:	9a 95       	dec	r25
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_init+0x2a>
 304:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wr_inst_ini>
 30c:	81 e2       	ldi	r24, 0x21	; 33
 30e:	8a 95       	dec	r24
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_init+0x38>
 312:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_wr_inst_ini>
 31a:	91 e2       	ldi	r25, 0x21	; 33
 31c:	9a 95       	dec	r25
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_init+0x46>
 320:	00 00       	nop
	_delay_us(100);	
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
	//LCD_wr_instruction(LCD_Cmd_ModeDcS); //Entry mode set ID S	
	LCD_wr_instruction(0b10000000); //posición 0 ->
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 33a:	8c e0       	ldi	r24, 0x0C	; 12
 33c:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
 340:	08 95       	ret

00000342 <main>:
void LCD_init(void);
void LCD_wr_string(volatile uint8_t *s);

int main(void)
{
	LCD_init();
 342:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_init>
	LCD_wr_instruction(0b11000000); //segunda línea
 346:	80 ec       	ldi	r24, 0xC0	; 192
 348:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_wr_instruction>
	LCD_wr_string("sara carolina :D");
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_wr_string>
 354:	ff cf       	rjmp	.-2      	; 0x354 <main+0x12>

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
