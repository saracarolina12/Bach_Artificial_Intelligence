
03TecladoMatricial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b7  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028d  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z7pressedv>:
	{0x7, 0x8, 0x9, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t pressed(){
	for(uint8_t i = 0;; i++, i %= 4){
  82:	30 e0       	ldi	r19, 0x00	; 0
		PORTT = ~(1 << i);
  84:	43 2f       	mov	r20, r19
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	03 2e       	mov	r0, r19
  8e:	02 c0       	rjmp	.+4      	; 0x94 <_Z7pressedv+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <_Z7pressedv+0xe>
  98:	80 95       	com	r24
  9a:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  9c:	00 00       	nop
		asm("nop");
  9e:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  a0:	24 e0       	ldi	r18, 0x04	; 4
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	b8 f5       	brcc	.+110    	; 0x114 <_Z7pressedv+0x92>
			if(isClear(PINT, j)){
  a6:	89 b3       	in	r24, 0x19	; 25
  a8:	62 2f       	mov	r22, r18
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 2e       	mov	r0, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_Z7pressedv+0x34>
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <_Z7pressedv+0x30>
  ba:	80 fd       	sbrc	r24, 0
  bc:	29 c0       	rjmp	.+82     	; 0x110 <_Z7pressedv+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <_Z7pressedv+0x40>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_Z7pressedv+0x46>
  c8:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINT, j));
  ca:	89 b3       	in	r24, 0x19	; 25
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	06 2e       	mov	r0, r22
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_Z7pressedv+0x54>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <_Z7pressedv+0x50>
  da:	80 ff       	sbrs	r24, 0
  dc:	f6 cf       	rjmp	.-20     	; 0xca <_Z7pressedv+0x48>
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z7pressedv+0x60>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z7pressedv+0x66>
  e8:	00 00       	nop
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	86 1b       	sub	r24, r22
  f0:	97 0b       	sbc	r25, r23
  f2:	23 e0       	ldi	r18, 0x03	; 3
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	24 1b       	sub	r18, r20
  f8:	35 0b       	sbc	r19, r21
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	80 5a       	subi	r24, 0xA0	; 160
 104:	9f 4f       	sbci	r25, 0xFF	; 255
 106:	fc 01       	movw	r30, r24
 108:	e2 0f       	add	r30, r18
 10a:	f3 1f       	adc	r31, r19
 10c:	80 81       	ld	r24, Z
 10e:	08 95       	ret
uint8_t pressed(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTT = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	c7 cf       	rjmp	.-114    	; 0xa2 <_Z7pressedv+0x20>
	{0x7, 0x8, 0x9, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t pressed(){
	for(uint8_t i = 0;; i++, i %= 4){
 114:	3f 5f       	subi	r19, 0xFF	; 255
 116:	33 70       	andi	r19, 0x03	; 3
 118:	b5 cf       	rjmp	.-150    	; 0x84 <_Z7pressedv+0x2>

0000011a <main>:
}

int main(void)
{
	//teclado
    DDRT = 0b00001111;					//7->4: entradas,3->0: salidas
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	8a bb       	out	0x1a, r24	; 26
	PORTT = 0b11111111;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8b bb       	out	0x1b, r24	; 27
	
	//declarar otras variables
	DDRC = 0b11111111;
 122:	84 bb       	out	0x14, r24	; 20
	PORTC= 0;
 124:	15 ba       	out	0x15, r1	; 21
	DDRD = 0b11111111;
 126:	81 bb       	out	0x11, r24	; 17
	PORTD= 0;
 128:	12 ba       	out	0x12, r1	; 18
	
	DDRB = 0;
 12a:	17 ba       	out	0x17, r1	; 23
	PORTB= 0;
 12c:	18 ba       	out	0x18, r1	; 24
	uint8_t cont=1, temp, tecla, resp, last;
 12e:	c1 e0       	ldi	r28, 0x01	; 1
    while (1){
		tecla = pressed();
 130:	0e 94 41 00 	call	0x82	; 0x82 <_Z7pressedv>
		PORTB = tecla;
 134:	88 bb       	out	0x18, r24	; 24
		if(tecla == 15){
 136:	8f 30       	cpi	r24, 0x0F	; 15
 138:	49 f4       	brne	.+18     	; 0x14c <main+0x32>
			DDRT = 0b00001111;
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	9a bb       	out	0x1a, r25	; 26
			PORTT = 0b11111111;
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	9b bb       	out	0x1b, r25	; 27
			DDRC = 0b11111111;
 142:	94 bb       	out	0x14, r25	; 20
			PORTC= 0;
 144:	15 ba       	out	0x15, r1	; 21
			DDRD = 0b11111111;
 146:	91 bb       	out	0x11, r25	; 17
			PORTD= 0;
 148:	12 ba       	out	0x12, r1	; 18
			cont = 1;
 14a:	c1 e0       	ldi	r28, 0x01	; 1
		}
		if(cont == 1 && tecla != 15){
 14c:	c1 30       	cpi	r28, 0x01	; 1
 14e:	31 f4       	brne	.+12     	; 0x15c <main+0x42>
 150:	8f 30       	cpi	r24, 0x0F	; 15
 152:	21 f0       	breq	.+8      	; 0x15c <main+0x42>
			PORTC = temp = tecla;
 154:	85 bb       	out	0x15, r24	; 21
			cont++;
 156:	cf 5f       	subi	r28, 0xFF	; 255
			DDRD = 0b11111111;
			PORTD= 0;
			cont = 1;
		}
		if(cont == 1 && tecla != 15){
			PORTC = temp = tecla;
 158:	08 2f       	mov	r16, r24
			cont++;
 15a:	ea cf       	rjmp	.-44     	; 0x130 <main+0x16>
		}else if(cont == 2){
 15c:	c2 30       	cpi	r28, 0x02	; 2
 15e:	51 f4       	brne	.+20     	; 0x174 <main+0x5a>
			uint8_t mix = (temp<<4);
 160:	90 2f       	mov	r25, r16
 162:	92 95       	swap	r25
 164:	90 7f       	andi	r25, 0xF0	; 240
			mix |= tecla;
 166:	98 2b       	or	r25, r24
			resp = tecla<<4;
 168:	d8 2f       	mov	r29, r24
 16a:	d2 95       	swap	r29
 16c:	d0 7f       	andi	r29, 0xF0	; 240
			PORTC = mix;
 16e:	95 bb       	out	0x15, r25	; 21
			cont++;
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	de cf       	rjmp	.-68     	; 0x130 <main+0x16>
		}else if(cont == 3){
 174:	c3 30       	cpi	r28, 0x03	; 3
 176:	49 f4       	brne	.+18     	; 0x18a <main+0x70>
			uint8_t res = resp | tecla;
 178:	9d 2f       	mov	r25, r29
 17a:	98 2b       	or	r25, r24
			last = tecla<<4;
 17c:	18 2f       	mov	r17, r24
 17e:	12 95       	swap	r17
 180:	10 7f       	andi	r17, 0xF0	; 240
			PORTC = res;
 182:	95 bb       	out	0x15, r25	; 21
			PORTD = temp;
 184:	02 bb       	out	0x12, r16	; 18
			cont++;
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	d3 cf       	rjmp	.-90     	; 0x130 <main+0x16>
		}else if(cont > 3){		
 18a:	c4 30       	cpi	r28, 0x04	; 4
 18c:	88 f2       	brcs	.-94     	; 0x130 <main+0x16>
			uint8_t total = last | tecla;	
 18e:	91 2f       	mov	r25, r17
 190:	98 2b       	or	r25, r24
			resp = resp>>4;
 192:	2d 2f       	mov	r18, r29
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	35 95       	asr	r19
 198:	27 95       	ror	r18
 19a:	35 95       	asr	r19
 19c:	27 95       	ror	r18
 19e:	35 95       	asr	r19
 1a0:	27 95       	ror	r18
 1a2:	35 95       	asr	r19
 1a4:	27 95       	ror	r18
			PORTC = total;
 1a6:	95 bb       	out	0x15, r25	; 21
			PORTD = resp;
 1a8:	22 bb       	out	0x12, r18	; 18
			resp = last;
 1aa:	d1 2f       	mov	r29, r17
			last = tecla<<4;
 1ac:	18 2f       	mov	r17, r24
 1ae:	12 95       	swap	r17
 1b0:	10 7f       	andi	r17, 0xF0	; 240
 1b2:	be cf       	rjmp	.-132    	; 0x130 <main+0x16>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
