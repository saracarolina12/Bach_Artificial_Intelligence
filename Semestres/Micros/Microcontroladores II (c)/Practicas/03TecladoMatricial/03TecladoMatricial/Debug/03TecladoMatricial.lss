
03TecladoMatricial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a61  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  64:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z11cero_en_bitPVhh>:

//globales
//uint8_t arr[16] = [10,11,12,13,3,6,9,14,2,5,8,0,1,4,7,15]; //14=#, 15=*

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
  6c:	fc 01       	movw	r30, r24
  6e:	80 81       	ld	r24, Z
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <_Z11cero_en_bitPVhh+0xc>
  74:	95 95       	asr	r25
  76:	87 95       	ror	r24
  78:	6a 95       	dec	r22
  7a:	e2 f7       	brpl	.-8      	; 0x74 <_Z11cero_en_bitPVhh+0x8>
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	8f 27       	eor	r24, r31
}
  80:	81 70       	andi	r24, 0x01	; 1
  82:	08 95       	ret

00000084 <_Z3RTRh>:
void RTR(uint8_t pin){
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z3RTRh+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z3RTRh+0xe>
  92:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(&PINA,pin));
  94:	6c 2f       	mov	r22, r28
  96:	89 e3       	ldi	r24, 0x39	; 57
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
  9e:	81 11       	cpse	r24, r1
  a0:	f9 cf       	rjmp	.-14     	; 0x94 <_Z3RTRh+0x10>
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z3RTRh+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z3RTRh+0x28>
  ac:	00 00       	nop
	_delay_ms(50);
}
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <_Z7pressedv>:

uint8_t pressed(void){
  b2:	cf 93       	push	r28
	while(1){
		PORTT = ~(1<<0);				//1111_1110 rota tierra
  b4:	8e ef       	ldi	r24, 0xFE	; 254
  b6:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  b8:	00 00       	nop
		asm("nop");
  ba:	00 00       	nop
		//ABCD
		if(cero_en_bit(&PINT,4)){		//A
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	89 e3       	ldi	r24, 0x39	; 57
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
  c6:	88 23       	and	r24, r24
  c8:	29 f0       	breq	.+10     	; 0xd4 <_Z7pressedv+0x22>
			RTR(4);
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(13);
  d0:	cd e0       	ldi	r28, 0x0D	; 13
  d2:	ba c0       	rjmp	.+372    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,5)){		//B
  d4:	65 e0       	ldi	r22, 0x05	; 5
  d6:	89 e3       	ldi	r24, 0x39	; 57
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
  de:	88 23       	and	r24, r24
  e0:	29 f0       	breq	.+10     	; 0xec <_Z7pressedv+0x3a>
			RTR(5);
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(12);
  e8:	cc e0       	ldi	r28, 0x0C	; 12
  ea:	ae c0       	rjmp	.+348    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,6)){		//C
  ec:	66 e0       	ldi	r22, 0x06	; 6
  ee:	89 e3       	ldi	r24, 0x39	; 57
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
  f6:	88 23       	and	r24, r24
  f8:	29 f0       	breq	.+10     	; 0x104 <_Z7pressedv+0x52>
			RTR(6);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(11);
 100:	cb e0       	ldi	r28, 0x0B	; 11
 102:	a2 c0       	rjmp	.+324    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,7)){		//D
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	89 e3       	ldi	r24, 0x39	; 57
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 10e:	88 23       	and	r24, r24
 110:	29 f0       	breq	.+10     	; 0x11c <_Z7pressedv+0x6a>
			RTR(7);
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(10);
 118:	ca e0       	ldi	r28, 0x0A	; 10
 11a:	96 c0       	rjmp	.+300    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		PORTT = ~(1<<1);
 11c:	8d ef       	ldi	r24, 0xFD	; 253
 11e:	8b bb       	out	0x1b, r24	; 27
		
		//3,6,9,#(F)
		if(cero_en_bit(&PINT,4)){		//A
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	89 e3       	ldi	r24, 0x39	; 57
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 12a:	88 23       	and	r24, r24
 12c:	29 f0       	breq	.+10     	; 0x138 <_Z7pressedv+0x86>
			RTR(4);
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(15);
 134:	cf e0       	ldi	r28, 0x0F	; 15
 136:	88 c0       	rjmp	.+272    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,5)){		//B
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	89 e3       	ldi	r24, 0x39	; 57
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 142:	88 23       	and	r24, r24
 144:	29 f0       	breq	.+10     	; 0x150 <_Z7pressedv+0x9e>
			RTR(5);
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(9);
 14c:	c9 e0       	ldi	r28, 0x09	; 9
 14e:	7c c0       	rjmp	.+248    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,6)){		//C
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	89 e3       	ldi	r24, 0x39	; 57
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 15a:	88 23       	and	r24, r24
 15c:	29 f0       	breq	.+10     	; 0x168 <_Z7pressedv+0xb6>
			RTR(6);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(6);
 164:	c6 e0       	ldi	r28, 0x06	; 6
 166:	70 c0       	rjmp	.+224    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,7)){		//D
 168:	67 e0       	ldi	r22, 0x07	; 7
 16a:	89 e3       	ldi	r24, 0x39	; 57
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 172:	c8 2f       	mov	r28, r24
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <_Z7pressedv+0xd0>
			RTR(7);
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(3);
 17e:	c3 e0       	ldi	r28, 0x03	; 3
 180:	63 c0       	rjmp	.+198    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		PORTT = ~(1<<2);
 182:	8b ef       	ldi	r24, 0xFB	; 251
 184:	8b bb       	out	0x1b, r24	; 27
		
		//2,5,8,0
		if(cero_en_bit(&PINT,4)){		//A
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	89 e3       	ldi	r24, 0x39	; 57
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 190:	88 23       	and	r24, r24
 192:	21 f0       	breq	.+8      	; 0x19c <_Z7pressedv+0xea>
			RTR(4);
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(0);
 19a:	56 c0       	rjmp	.+172    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,5)){		//B
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	89 e3       	ldi	r24, 0x39	; 57
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 1a6:	88 23       	and	r24, r24
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <_Z7pressedv+0x102>
			RTR(5);
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(8);
 1b0:	c8 e0       	ldi	r28, 0x08	; 8
 1b2:	4a c0       	rjmp	.+148    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,6)){		//C
 1b4:	66 e0       	ldi	r22, 0x06	; 6
 1b6:	89 e3       	ldi	r24, 0x39	; 57
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 1be:	88 23       	and	r24, r24
 1c0:	29 f0       	breq	.+10     	; 0x1cc <_Z7pressedv+0x11a>
			RTR(6);
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(5);
 1c8:	c5 e0       	ldi	r28, 0x05	; 5
 1ca:	3e c0       	rjmp	.+124    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,7)){		//D
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	89 e3       	ldi	r24, 0x39	; 57
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 1d6:	88 23       	and	r24, r24
 1d8:	29 f0       	breq	.+10     	; 0x1e4 <_Z7pressedv+0x132>
			RTR(7);
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(2);
 1e0:	c2 e0       	ldi	r28, 0x02	; 2
 1e2:	32 c0       	rjmp	.+100    	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		PORTT = ~(1<<3);
 1e4:	87 ef       	ldi	r24, 0xF7	; 247
 1e6:	8b bb       	out	0x1b, r24	; 27
		
		//1,4,7,*(E)
		if(cero_en_bit(&PINT,4)){		//A
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	89 e3       	ldi	r24, 0x39	; 57
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 1f2:	88 23       	and	r24, r24
 1f4:	29 f0       	breq	.+10     	; 0x200 <__EEPROM_REGION_LENGTH__>
			RTR(4);
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(14);
 1fc:	ce e0       	ldi	r28, 0x0E	; 14
 1fe:	24 c0       	rjmp	.+72     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,5)){		//B
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	89 e3       	ldi	r24, 0x39	; 57
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 20a:	88 23       	and	r24, r24
 20c:	29 f0       	breq	.+10     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
			RTR(5);
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(7);
 214:	c7 e0       	ldi	r28, 0x07	; 7
 216:	18 c0       	rjmp	.+48     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,6)){		//C
 218:	66 e0       	ldi	r22, 0x06	; 6
 21a:	89 e3       	ldi	r24, 0x39	; 57
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 222:	88 23       	and	r24, r24
 224:	29 f0       	breq	.+10     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
			RTR(6);
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(4);
 22c:	c4 e0       	ldi	r28, 0x04	; 4
 22e:	0c c0       	rjmp	.+24     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		}
		if(cero_en_bit(&PINT,7)){		//D
 230:	67 e0       	ldi	r22, 0x07	; 7
 232:	89 e3       	ldi	r24, 0x39	; 57
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11cero_en_bitPVhh>
 23a:	88 23       	and	r24, r24
 23c:	09 f4       	brne	.+2      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 23e:	3a cf       	rjmp	.-396    	; 0xb4 <_Z7pressedv+0x2>
			RTR(7);
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	0e 94 42 00 	call	0x84	; 0x84 <_Z3RTRh>
			return(1);
 246:	c1 e0       	ldi	r28, 0x01	; 1
				//return arr[pos++];
			//}
			//PORTT = ~(1<<x++);
		//}
	}
}
 248:	8c 2f       	mov	r24, r28
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:

int main(void)
{
	//teclado
    DDRT = 0b00001111;					//7->4: entradas,3->0: salidas
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	8a bb       	out	0x1a, r24	; 26
	PORTT = 0b11111111;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8b bb       	out	0x1b, r24	; 27
	
	//declarar otras variables
	DDRC = 0b11111111;
 256:	84 bb       	out	0x14, r24	; 20
	PORTC= 0;
 258:	15 ba       	out	0x15, r1	; 21
	DDRD = 0b11111111;
 25a:	81 bb       	out	0x11, r24	; 17
	PORTD= 0;
 25c:	12 ba       	out	0x12, r1	; 18
	
	uint8_t tecla;
    while (1){
		//tecla = pressed();
		PORTD = pressed();
 25e:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z7pressedv>
 262:	82 bb       	out	0x12, r24	; 18
 264:	fc cf       	rjmp	.-8      	; 0x25e <main+0x10>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
