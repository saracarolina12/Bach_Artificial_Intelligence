
18_SPI-twoMicroSlaves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000652  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000234  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003f  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_INIT_MASTER>:
#include <stdio.h>
#define isClear(r, i) (!(r & (1 << i)))
#define isSet(r, i) (r & (1 << i))

void SPI_INIT_MASTER(){
	DDRB = (1<<MOSI_BIT) | (1<<7);  //mosi, sck
  6c:	80 ea       	ldi	r24, 0xA0	; 160
  6e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (1<< SPR1) | (1<< SPR0); 
  70:	83 e5       	ldi	r24, 0x53	; 83
  72:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0XFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0XFF;
  78:	8b bb       	out	0x1b, r24	; 27
  7a:	08 95       	ret

0000007c <SPI_TRANSMIT>:
}

uint8_t SPI_TRANSMIT(uint8_t slave_idx, uint8_t data){
	PORTA = ~(1<<slave_idx);
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	a9 01       	movw	r20, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <SPI_TRANSMIT+0xc>
  84:	44 0f       	add	r20, r20
  86:	55 1f       	adc	r21, r21
  88:	8a 95       	dec	r24
  8a:	e2 f7       	brpl	.-8      	; 0x84 <SPI_TRANSMIT+0x8>
  8c:	ca 01       	movw	r24, r20
  8e:	24 2f       	mov	r18, r20
  90:	20 95       	com	r18
  92:	2b bb       	out	0x1b, r18	; 27
	SPDR = data;
  94:	6f b9       	out	0x0f, r22	; 15
	while( !( SPSR &  (1<<SPIF)) ); //trabo hasta que termine de transmitir
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <SPI_TRANSMIT+0x1a>
	PORTA |= (1<<slave_idx);
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	89 2b       	or	r24, r25
  9e:	8b bb       	out	0x1b, r24	; 27
	data = SPDR;
  a0:	8f b1       	in	r24, 0x0f	; 15
	return data;
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
	SPI_INIT_MASTER();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_INIT_MASTER>
	DDRC = 0x00;
  a8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 bb       	out	0x15, r24	; 21
	uint8_t dato;
    while(1)
    {
        if( isClear(PINC, 0) ){
  ae:	98 99       	sbic	0x13, 0	; 19
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0xa>
			dato = SPI_TRANSMIT(6, 0b11111110);
  b2:	6e ef       	ldi	r22, 0xFE	; 254
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_TRANSMIT>
			dato = SPI_TRANSMIT(7, 0b11110000);
  ba:	60 ef       	ldi	r22, 0xF0	; 240
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_TRANSMIT>
  c2:	f5 cf       	rjmp	.-22     	; 0xae <main+0xa>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
