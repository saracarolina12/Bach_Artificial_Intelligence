
SlavesCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006af  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_INIT_S>:
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

void SPI_INIT_S(){
	DDRB = (1<<6); 
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE)|(0 << MSTR)|(1<< SPR1)|(1<< SPR0);
  70:	83 e4       	ldi	r24, 0x43	; 67
  72:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0; 
  74:	1f b8       	out	0x0f, r1	; 15
  76:	08 95       	ret

00000078 <RECEIVE_DATA>:
}

uint8_t RECEIVE_DATA(){
	while(!(SPSR&(1<<SPIF))); //trabo hasta que termine 
  78:	77 9b       	sbis	0x0e, 7	; 14
  7a:	fe cf       	rjmp	.-4      	; 0x78 <RECEIVE_DATA>
	uint8_t dato = SPDR;
  7c:	8f b1       	in	r24, 0x0f	; 15
	SPDR=0;
  7e:	1f b8       	out	0x0f, r1	; 15
	return dato;
}
  80:	08 95       	ret

00000082 <main>:

int main(void)
{
    DDRC = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  86:	15 ba       	out	0x15, r1	; 21
	SPI_INIT_S();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_INIT_S>
    while (1) 
    {
		uint8_t x = RECEIVE_DATA();
  8c:	0e 94 3c 00 	call	0x78	; 0x78 <RECEIVE_DATA>
		PORTC = x; //muestro el dato
  90:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	89 e6       	ldi	r24, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x20>
  a2:	00 00       	nop
		_delay_ms(1000); //espero 1 segundo
		PORTC = 0; //clear
  a4:	15 ba       	out	0x15, r1	; 21
  a6:	f2 cf       	rjmp	.-28     	; 0x8c <main+0xa>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
