
19_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800088  00800088  00000bda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001247  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063b  00000000  00000000  00002656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072f  00000000  00000000  00003226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  8a:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <saca_uno>:
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}


void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){ // al usarla, no olvidar el &
	*LUGAR=*LUGAR|(1<<BIT);
  92:	fc 01       	movw	r30, r24
  94:	40 81       	ld	r20, Z
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <saca_uno+0xe>
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <saca_uno+0xa>
  a4:	24 2b       	or	r18, r20
  a6:	20 83       	st	Z, r18
  a8:	08 95       	ret

000000aa <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){// al usarla, no olvidar el &
  aa:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
  ac:	90 81       	ld	r25, Z
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <saca_cero+0xe>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <saca_cero+0xa>
  bc:	20 95       	com	r18
  be:	29 23       	and	r18, r25
  c0:	20 83       	st	Z, r18
  c2:	08 95       	ret

000000c4 <LCD_wr_inst_ini>:
	saca_cero(&PORTLCD,RS);
	LCD_wait_flag();
}

void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribir? un dato
  c4:	82 bb       	out	0x12, r24	; 18
	saca_cero(&PORTLCD,RS);
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	82 e3       	ldi	r24, 0x32	; 50
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	82 e3       	ldi	r24, 0x32	; 50
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
  da:	66 e0       	ldi	r22, 0x06	; 6
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	83 ec       	ldi	r24, 0xC3	; 195
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_wr_inst_ini+0x24>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_wr_inst_ini+0x2a>
  ee:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	82 e3       	ldi	r24, 0x32	; 50
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
  fa:	08 95       	ret

000000fc <LCD_wait_flag>:
}


void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo dem?s salida
  fc:	81 b3       	in	r24, 0x11	; 17
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	81 bb       	out	0x11, r24	; 17
	saca_cero(&PORTLCD,RS);// Instrucci?n
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	82 e3       	ldi	r24, 0x32	; 50
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	82 e3       	ldi	r24, 0x32	; 50
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	82 e3       	ldi	r24, 0x32	; 50
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 120:	83 ec       	ldi	r24, 0xC3	; 195
 122:	99 e0       	ldi	r25, 0x09	; 9
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_wait_flag+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_wait_flag+0x2e>
 12a:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	82 e3       	ldi	r24, 0x32	; 50
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
		if(isSet(PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 136:	83 99       	sbic	0x10, 3	; 16
 138:	15 c0       	rjmp	.+42     	; 0x164 <LCD_wait_flag+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_wait_flag+0x40>
 140:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 142:	66 e0       	ldi	r22, 0x06	; 6
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	83 ec       	ldi	r24, 0xC3	; 195
 14e:	99 e0       	ldi	r25, 0x09	; 9
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_wait_flag+0x54>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_wait_flag+0x5a>
 156:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 158:	66 e0       	ldi	r22, 0x06	; 6
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	}
 162:	d9 cf       	rjmp	.-78     	; 0x116 <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_wait_flag+0x76>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_wait_flag+0x7c>
 178:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RS);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	82 e3       	ldi	r24, 0x32	; 50
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 18e:	65 e0       	ldi	r22, 0x05	; 5
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 198:	81 b3       	in	r24, 0x11	; 17
 19a:	8f 67       	ori	r24, 0x7F	; 127
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret

000001a0 <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(volatile uint8_t data){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	1f 92       	push	r1
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	89 83       	std	Y+1, r24	; 0x01
	//saco la parte m?s significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribir? un dato
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	82 bb       	out	0x12, r24	; 18
	saca_uno(&PORTLCD,RS);
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 1c8:	66 e0       	ldi	r22, 0x06	; 6
 1ca:	82 e3       	ldi	r24, 0x32	; 50
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 1d2:	83 ec       	ldi	r24, 0xC3	; 195
 1d4:	99 e0       	ldi	r25, 0x09	; 9
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_wr_char+0x36>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_wr_char+0x3c>
 1dc:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1de:	66 e0       	ldi	r22, 0x06	; 6
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribir? un dato
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	82 bb       	out	0x12, r24	; 18
	saca_uno(&PORTLCD,RS);
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	82 e3       	ldi	r24, 0x32	; 50
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 202:	66 e0       	ldi	r22, 0x06	; 6
 204:	82 e3       	ldi	r24, 0x32	; 50
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 20c:	83 ec       	ldi	r24, 0xC3	; 195
 20e:	99 e0       	ldi	r25, 0x09	; 9
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 216:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 218:	66 e0       	ldi	r22, 0x06	; 6
 21a:	82 e3       	ldi	r24, 0x32	; 50
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RS);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	82 e3       	ldi	r24, 0x32	; 50
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 22c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_wait_flag>
}
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCD_wr_string>:
void LCD_wr_lines(volatile const char *a, volatile const char *b);

volatile uint8_t s[16], s2[16];


void LCD_wr_string(volatile const char *s){
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
	char c;
	while((c=*s++)){
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 240:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_wr_char>
volatile uint8_t s[16], s2[16];


void LCD_wr_string(volatile const char *s){
	char c;
	while((c=*s++)){
 244:	fe 01       	movw	r30, r28
 246:	ef 01       	movw	r28, r30
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f8 cf       	rjmp	.-16     	; 0x240 <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa de la instrucci?n
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribir? un dato
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	82 bb       	out	0x12, r24	; 18
	saca_cero(&PORTLCD,RS);
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	82 e3       	ldi	r24, 0x32	; 50
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 274:	66 e0       	ldi	r22, 0x06	; 6
 276:	82 e3       	ldi	r24, 0x32	; 50
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 27e:	83 ec       	ldi	r24, 0xC3	; 195
 280:	99 e0       	ldi	r25, 0x09	; 9
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_wr_instruction+0x2c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_wr_instruction+0x32>
 288:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 28a:	66 e0       	ldi	r22, 0x06	; 6
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa de la instrucci?n
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribir? un dato
 294:	cf 70       	andi	r28, 0x0F	; 15
 296:	c2 bb       	out	0x12, r28	; 18
	saca_cero(&PORTLCD,RS);
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	82 e3       	ldi	r24, 0x32	; 50
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	82 e3       	ldi	r24, 0x32	; 50
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 2ac:	66 e0       	ldi	r22, 0x06	; 6
 2ae:	82 e3       	ldi	r24, 0x32	; 50
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 2b6:	83 ec       	ldi	r24, 0xC3	; 195
 2b8:	99 e0       	ldi	r25, 0x09	; 9
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_wr_instruction+0x64>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_wr_instruction+0x6a>
 2c0:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	82 e3       	ldi	r24, 0x32	; 50
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 2cc:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_wait_flag>
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_wr_lines>:
	while((c=*s++)){
		LCD_wr_char(c);
	}
}

void LCD_wr_lines(volatile const char *a, volatile const char *b){
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8c 01       	movw	r16, r24
 2de:	eb 01       	movw	r28, r22
	LCD_wr_instruction(LCD_Cmd_Clear);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_instruction(0b10000000);
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_string(a);
 2ec:	c8 01       	movw	r24, r16
 2ee:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_wr_string>
	LCD_wr_instruction(0b11000000);
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_string(b);
 2f8:	ce 01       	movw	r24, r28
 2fa:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_wr_string>
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <LCD_init>:

void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 308:	8f e7       	ldi	r24, 0x7F	; 127
 30a:	81 bb       	out	0x11, r24	; 17
 30c:	85 ea       	ldi	r24, 0xA5	; 165
 30e:	9e e0       	ldi	r25, 0x0E	; 14
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_init+0x8>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_init+0xe>
 316:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 31e:	81 ee       	ldi	r24, 0xE1	; 225
 320:	94 e0       	ldi	r25, 0x04	; 4
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_init+0x1a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_init+0x20>
 328:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	91 e2       	ldi	r25, 0x21	; 33
 332:	9a 95       	dec	r25
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_init+0x2a>
 336:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 33e:	81 e2       	ldi	r24, 0x21	; 33
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_init+0x38>
 344:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 34c:	91 e2       	ldi	r25, 0x21	; 33
 34e:	9a 95       	dec	r25
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_init+0x46>
 352:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_instruction>
 372:	08 95       	ret

00000374 <SPI_INIT_MASTER>:
	*LUGAR=*LUGAR&~(1<<BIT);
}


void SPI_INIT_MASTER(){
	DDRB = (1<<MOSI_BIT) | (1<<7); // MOSI 5  SCK 7  MISO 6 
 374:	80 ea       	ldi	r24, 0xA0	; 160
 376:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (1<< SPR1) | (1<< SPR0); // Enable, Master, 128 Fosc
 378:	83 e5       	ldi	r24, 0x53	; 83
 37a:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0XFF;
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0XFF;
 380:	8b bb       	out	0x1b, r24	; 27
 382:	08 95       	ret

00000384 <SPI_TRANSMIT>:
}

uint8_t SPI_TRANSMIT(uint8_t i, uint8_t data){
	PORTA = ~(1<<i);
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	a9 01       	movw	r20, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <SPI_TRANSMIT+0xc>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <SPI_TRANSMIT+0x8>
 394:	ca 01       	movw	r24, r20
 396:	24 2f       	mov	r18, r20
 398:	20 95       	com	r18
 39a:	2b bb       	out	0x1b, r18	; 27
	SPDR = data;
 39c:	6f b9       	out	0x0f, r22	; 15
	while( !( SPSR &  (1<<SPIF)) ); //trabo hasta que termine de transmitir
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <SPI_TRANSMIT+0x1a>
	PORTA |= (1<<i);
 3a2:	9b b3       	in	r25, 0x1b	; 27
 3a4:	89 2b       	or	r24, r25
 3a6:	8b bb       	out	0x1b, r24	; 27
	return SPDR;
 3a8:	8f b1       	in	r24, 0x0f	; 15
}
 3aa:	08 95       	ret

000003ac <main>:


int main(void)
{
	LCD_init();
 3ac:	0e 94 84 01 	call	0x308	; 0x308 <LCD_init>
	SPI_INIT_MASTER();
 3b0:	0e 94 ba 01 	call	0x374	; 0x374 <SPI_INIT_MASTER>
	
	DDRC = 0;
 3b4:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	85 bb       	out	0x15, r24	; 21
	sprintf(s,  "SPI");
 3ba:	e8 e9       	ldi	r30, 0x98	; 152
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	83 e5       	ldi	r24, 0x53	; 83
 3c0:	90 e5       	ldi	r25, 0x50	; 80
 3c2:	91 83       	std	Z+1, r25	; 0x01
 3c4:	80 83       	st	Z, r24
 3c6:	89 e4       	ldi	r24, 0x49	; 73
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	93 83       	std	Z+3, r25	; 0x03
 3cc:	82 83       	std	Z+2, r24	; 0x02
	sprintf(s2, "Bidireccional");
 3ce:	8e e0       	ldi	r24, 0x0E	; 14
 3d0:	e0 e6       	ldi	r30, 0x60	; 96
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	a8 e8       	ldi	r26, 0x88	; 136
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	01 90       	ld	r0, Z+
 3da:	0d 92       	st	X+, r0
 3dc:	8a 95       	dec	r24
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x2c>
	LCD_wr_lines(s,s2);
 3e0:	68 e8       	ldi	r22, 0x88	; 136
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	88 e9       	ldi	r24, 0x98	; 152
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_wr_lines>
	uint8_t data, slave, idx, pot;
    while(1)
    {
        if( isClear(PINC, 0) ){
 3ec:	98 99       	sbic	0x13, 0	; 19
 3ee:	13 c0       	rjmp	.+38     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	83 ed       	ldi	r24, 0xD3	; 211
 3f2:	90 e3       	ldi	r25, 0x30	; 48
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <main+0x48>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x4e>
 3fa:	00 00       	nop
			_delay_ms(50);
			while( isClear(PINC, 0) ){}
 3fc:	98 9b       	sbis	0x13, 0	; 19
 3fe:	fe cf       	rjmp	.-4      	; 0x3fc <main+0x50>
 400:	83 ed       	ldi	r24, 0xD3	; 211
 402:	90 e3       	ldi	r25, 0x30	; 48
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
			slave = 6; pot = 1;idx = 0;
 40c:	ee 24       	eor	r14, r14
 40e:	e3 94       	inc	r14
 410:	f1 2c       	mov	r15, r1
 412:	06 e0       	ldi	r16, 0x06	; 6
 414:	46 c0       	rjmp	.+140    	; 0x4a2 <__stack+0x43>
			_delay_ms(50);
		}else if( isClear(PINC, 2) ){
 416:	9a 99       	sbic	0x13, 2	; 19
 418:	17 c0       	rjmp	.+46     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 41a:	83 ed       	ldi	r24, 0xD3	; 211
 41c:	90 e3       	ldi	r25, 0x30	; 48
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 424:	00 00       	nop
			_delay_ms(50);
			while( isClear(PINC, 2) ){}
 426:	9a 9b       	sbis	0x13, 2	; 19
 428:	fe cf       	rjmp	.-4      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 42a:	83 ed       	ldi	r24, 0xD3	; 211
 42c:	90 e3       	ldi	r25, 0x30	; 48
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 434:	00 00       	nop
			slave = 6; pot = 2;idx = 7;
 436:	68 94       	set
 438:	ee 24       	eor	r14, r14
 43a:	e1 f8       	bld	r14, 1
 43c:	0f 2e       	mov	r0, r31
 43e:	f7 e0       	ldi	r31, 0x07	; 7
 440:	ff 2e       	mov	r15, r31
 442:	f0 2d       	mov	r31, r0
 444:	06 e0       	ldi	r16, 0x06	; 6
 446:	2d c0       	rjmp	.+90     	; 0x4a2 <__stack+0x43>
			_delay_ms(50);
		}else if( isClear(PINC, 4) ){
 448:	9c 99       	sbic	0x13, 4	; 19
 44a:	13 c0       	rjmp	.+38     	; 0x472 <__stack+0x13>
 44c:	83 ed       	ldi	r24, 0xD3	; 211
 44e:	90 e3       	ldi	r25, 0x30	; 48
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 456:	00 00       	nop
			_delay_ms(50);
			while( isClear(PINC, 4) ){}
 458:	9c 9b       	sbis	0x13, 4	; 19
 45a:	fe cf       	rjmp	.-4      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 45c:	83 ed       	ldi	r24, 0xD3	; 211
 45e:	90 e3       	ldi	r25, 0x30	; 48
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__stack+0x7>
 466:	00 00       	nop
			slave = 7; pot = 1;idx = 0;
 468:	ee 24       	eor	r14, r14
 46a:	e3 94       	inc	r14
 46c:	f1 2c       	mov	r15, r1
 46e:	07 e0       	ldi	r16, 0x07	; 7
 470:	18 c0       	rjmp	.+48     	; 0x4a2 <__stack+0x43>
			_delay_ms(50);
		}else if( isClear(PINC, 6) ){
 472:	9e 99       	sbic	0x13, 6	; 19
 474:	bb cf       	rjmp	.-138    	; 0x3ec <main+0x40>
 476:	83 ed       	ldi	r24, 0xD3	; 211
 478:	90 e3       	ldi	r25, 0x30	; 48
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__stack+0x21>
 480:	00 00       	nop
			_delay_ms(50);
			while( isClear(PINC, 6) ){}
 482:	9e 9b       	sbis	0x13, 6	; 19
 484:	fe cf       	rjmp	.-4      	; 0x482 <__stack+0x23>
 486:	83 ed       	ldi	r24, 0xD3	; 211
 488:	90 e3       	ldi	r25, 0x30	; 48
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__stack+0x31>
 490:	00 00       	nop
			slave = 7; pot = 2;idx = 7;
 492:	68 94       	set
 494:	ee 24       	eor	r14, r14
 496:	e1 f8       	bld	r14, 1
 498:	0f 2e       	mov	r0, r31
 49a:	f7 e0       	ldi	r31, 0x07	; 7
 49c:	ff 2e       	mov	r15, r31
 49e:	f0 2d       	mov	r31, r0
 4a0:	07 e0       	ldi	r16, 0x07	; 7
			_delay_ms(50);
		}else continue;
		uint8_t dataf;
		dataf = SPI_TRANSMIT(slave, idx);
 4a2:	6f 2d       	mov	r22, r15
 4a4:	80 2f       	mov	r24, r16
 4a6:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_TRANSMIT>
 4aa:	8f e4       	ldi	r24, 0x4F	; 79
 4ac:	93 ec       	ldi	r25, 0xC3	; 195
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__stack+0x4f>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__stack+0x55>
 4b4:	00 00       	nop
		_delay_ms(200);
		sprintf(s,  "%d",data);
 4b6:	1f 92       	push	r1
 4b8:	1f 93       	push	r17
 4ba:	8c e7       	ldi	r24, 0x7C	; 124
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	9f 93       	push	r25
 4c0:	8f 93       	push	r24
 4c2:	c8 e9       	ldi	r28, 0x98	; 152
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	0e 94 a3 02 	call	0x546	; 0x546 <sprintf>
		data = SPI_TRANSMIT(slave, idx);
 4ce:	6f 2d       	mov	r22, r15
 4d0:	80 2f       	mov	r24, r16
 4d2:	0e 94 c2 01 	call	0x384	; 0x384 <SPI_TRANSMIT>
 4d6:	18 2f       	mov	r17, r24
		sprintf(s,  "#%d    Slave: %d",pot,slave);
 4d8:	1f 92       	push	r1
 4da:	0f 93       	push	r16
 4dc:	1f 92       	push	r1
 4de:	ef 92       	push	r14
 4e0:	8e e6       	ldi	r24, 0x6E	; 110
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9f 93       	push	r25
 4e6:	8f 93       	push	r24
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	0e 94 a3 02 	call	0x546	; 0x546 <sprintf>
		sprintf(s2, "%d.%d v", data/10, data%10);
 4f0:	8d ec       	ldi	r24, 0xCD	; 205
 4f2:	18 9f       	mul	r17, r24
 4f4:	81 2d       	mov	r24, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	86 95       	lsr	r24
 4fa:	86 95       	lsr	r24
 4fc:	86 95       	lsr	r24
 4fe:	28 2f       	mov	r18, r24
 500:	22 0f       	add	r18, r18
 502:	92 2f       	mov	r25, r18
 504:	99 0f       	add	r25, r25
 506:	99 0f       	add	r25, r25
 508:	92 0f       	add	r25, r18
 50a:	21 2f       	mov	r18, r17
 50c:	29 1b       	sub	r18, r25
 50e:	1f 92       	push	r1
 510:	2f 93       	push	r18
 512:	1f 92       	push	r1
 514:	8f 93       	push	r24
 516:	8f e7       	ldi	r24, 0x7F	; 127
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	9f 93       	push	r25
 51c:	8f 93       	push	r24
 51e:	88 e8       	ldi	r24, 0x88	; 136
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9f 93       	push	r25
 524:	8f 93       	push	r24
 526:	0e 94 a3 02 	call	0x546	; 0x546 <sprintf>
		LCD_wr_lines(s,s2);
 52a:	68 e8       	ldi	r22, 0x88	; 136
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_wr_lines>
 534:	8d b7       	in	r24, 0x3d	; 61
 536:	9e b7       	in	r25, 0x3e	; 62
 538:	46 96       	adiw	r24, 0x16	; 22
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	9e bf       	out	0x3e, r25	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	8d bf       	out	0x3d, r24	; 61
 544:	53 cf       	rjmp	.-346    	; 0x3ec <main+0x40>

00000546 <sprintf>:
 546:	ae e0       	ldi	r26, 0x0E	; 14
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e9 ea       	ldi	r30, 0xA9	; 169
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__prologue_saves__+0x1c>
 552:	0d 89       	ldd	r16, Y+21	; 0x15
 554:	1e 89       	ldd	r17, Y+22	; 0x16
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	8c 83       	std	Y+4, r24	; 0x04
 55a:	1a 83       	std	Y+2, r17	; 0x02
 55c:	09 83       	std	Y+1, r16	; 0x01
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	9f e7       	ldi	r25, 0x7F	; 127
 562:	9e 83       	std	Y+6, r25	; 0x06
 564:	8d 83       	std	Y+5, r24	; 0x05
 566:	ae 01       	movw	r20, r28
 568:	47 5e       	subi	r20, 0xE7	; 231
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	6f 89       	ldd	r22, Y+23	; 0x17
 56e:	78 8d       	ldd	r23, Y+24	; 0x18
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 c5 02 	call	0x58a	; 0x58a <vfprintf>
 578:	ef 81       	ldd	r30, Y+7	; 0x07
 57a:	f8 85       	ldd	r31, Y+8	; 0x08
 57c:	e0 0f       	add	r30, r16
 57e:	f1 1f       	adc	r31, r17
 580:	10 82       	st	Z, r1
 582:	2e 96       	adiw	r28, 0x0e	; 14
 584:	e4 e0       	ldi	r30, 0x04	; 4
 586:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__epilogue_restores__+0x1c>

0000058a <vfprintf>:
 58a:	ab e0       	ldi	r26, 0x0B	; 11
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 56 05 	jmp	0xaac	; 0xaac <__prologue_saves__>
 596:	6c 01       	movw	r12, r24
 598:	7b 01       	movw	r14, r22
 59a:	8a 01       	movw	r16, r20
 59c:	fc 01       	movw	r30, r24
 59e:	17 82       	std	Z+7, r1	; 0x07
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	cc c1       	rjmp	.+920    	; 0x940 <vfprintf+0x3b6>
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	3c 01       	movw	r6, r24
 5ae:	f6 01       	movw	r30, r12
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	f7 01       	movw	r30, r14
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	7f 01       	movw	r14, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x3a>
 5c2:	ba c1       	rjmp	.+884    	; 0x938 <vfprintf+0x3ae>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x4c>
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	7f 01       	movw	r14, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <vfprintf+0x56>
 5d6:	b6 01       	movw	r22, r12
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 5de:	e7 cf       	rjmp	.-50     	; 0x5ae <vfprintf+0x24>
 5e0:	91 2c       	mov	r9, r1
 5e2:	21 2c       	mov	r2, r1
 5e4:	31 2c       	mov	r3, r1
 5e6:	ff e1       	ldi	r31, 0x1F	; 31
 5e8:	f3 15       	cp	r31, r3
 5ea:	d8 f0       	brcs	.+54     	; 0x622 <vfprintf+0x98>
 5ec:	8b 32       	cpi	r24, 0x2B	; 43
 5ee:	79 f0       	breq	.+30     	; 0x60e <vfprintf+0x84>
 5f0:	38 f4       	brcc	.+14     	; 0x600 <vfprintf+0x76>
 5f2:	80 32       	cpi	r24, 0x20	; 32
 5f4:	79 f0       	breq	.+30     	; 0x614 <vfprintf+0x8a>
 5f6:	83 32       	cpi	r24, 0x23	; 35
 5f8:	a1 f4       	brne	.+40     	; 0x622 <vfprintf+0x98>
 5fa:	23 2d       	mov	r18, r3
 5fc:	20 61       	ori	r18, 0x10	; 16
 5fe:	1d c0       	rjmp	.+58     	; 0x63a <vfprintf+0xb0>
 600:	8d 32       	cpi	r24, 0x2D	; 45
 602:	61 f0       	breq	.+24     	; 0x61c <vfprintf+0x92>
 604:	80 33       	cpi	r24, 0x30	; 48
 606:	69 f4       	brne	.+26     	; 0x622 <vfprintf+0x98>
 608:	23 2d       	mov	r18, r3
 60a:	21 60       	ori	r18, 0x01	; 1
 60c:	16 c0       	rjmp	.+44     	; 0x63a <vfprintf+0xb0>
 60e:	83 2d       	mov	r24, r3
 610:	82 60       	ori	r24, 0x02	; 2
 612:	38 2e       	mov	r3, r24
 614:	e3 2d       	mov	r30, r3
 616:	e4 60       	ori	r30, 0x04	; 4
 618:	3e 2e       	mov	r3, r30
 61a:	2a c0       	rjmp	.+84     	; 0x670 <vfprintf+0xe6>
 61c:	f3 2d       	mov	r31, r3
 61e:	f8 60       	ori	r31, 0x08	; 8
 620:	1d c0       	rjmp	.+58     	; 0x65c <vfprintf+0xd2>
 622:	37 fc       	sbrc	r3, 7
 624:	2d c0       	rjmp	.+90     	; 0x680 <vfprintf+0xf6>
 626:	20 ed       	ldi	r18, 0xD0	; 208
 628:	28 0f       	add	r18, r24
 62a:	2a 30       	cpi	r18, 0x0A	; 10
 62c:	40 f0       	brcs	.+16     	; 0x63e <vfprintf+0xb4>
 62e:	8e 32       	cpi	r24, 0x2E	; 46
 630:	b9 f4       	brne	.+46     	; 0x660 <vfprintf+0xd6>
 632:	36 fc       	sbrc	r3, 6
 634:	81 c1       	rjmp	.+770    	; 0x938 <vfprintf+0x3ae>
 636:	23 2d       	mov	r18, r3
 638:	20 64       	ori	r18, 0x40	; 64
 63a:	32 2e       	mov	r3, r18
 63c:	19 c0       	rjmp	.+50     	; 0x670 <vfprintf+0xe6>
 63e:	36 fe       	sbrs	r3, 6
 640:	06 c0       	rjmp	.+12     	; 0x64e <vfprintf+0xc4>
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	98 9e       	mul	r9, r24
 646:	20 0d       	add	r18, r0
 648:	11 24       	eor	r1, r1
 64a:	92 2e       	mov	r9, r18
 64c:	11 c0       	rjmp	.+34     	; 0x670 <vfprintf+0xe6>
 64e:	ea e0       	ldi	r30, 0x0A	; 10
 650:	2e 9e       	mul	r2, r30
 652:	20 0d       	add	r18, r0
 654:	11 24       	eor	r1, r1
 656:	22 2e       	mov	r2, r18
 658:	f3 2d       	mov	r31, r3
 65a:	f0 62       	ori	r31, 0x20	; 32
 65c:	3f 2e       	mov	r3, r31
 65e:	08 c0       	rjmp	.+16     	; 0x670 <vfprintf+0xe6>
 660:	8c 36       	cpi	r24, 0x6C	; 108
 662:	21 f4       	brne	.+8      	; 0x66c <vfprintf+0xe2>
 664:	83 2d       	mov	r24, r3
 666:	80 68       	ori	r24, 0x80	; 128
 668:	38 2e       	mov	r3, r24
 66a:	02 c0       	rjmp	.+4      	; 0x670 <vfprintf+0xe6>
 66c:	88 36       	cpi	r24, 0x68	; 104
 66e:	41 f4       	brne	.+16     	; 0x680 <vfprintf+0xf6>
 670:	f7 01       	movw	r30, r14
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	7f 01       	movw	r14, r30
 67c:	81 11       	cpse	r24, r1
 67e:	b3 cf       	rjmp	.-154    	; 0x5e6 <vfprintf+0x5c>
 680:	98 2f       	mov	r25, r24
 682:	9f 7d       	andi	r25, 0xDF	; 223
 684:	95 54       	subi	r25, 0x45	; 69
 686:	93 30       	cpi	r25, 0x03	; 3
 688:	28 f4       	brcc	.+10     	; 0x694 <vfprintf+0x10a>
 68a:	0c 5f       	subi	r16, 0xFC	; 252
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	9f e3       	ldi	r25, 0x3F	; 63
 690:	99 83       	std	Y+1, r25	; 0x01
 692:	0d c0       	rjmp	.+26     	; 0x6ae <vfprintf+0x124>
 694:	83 36       	cpi	r24, 0x63	; 99
 696:	31 f0       	breq	.+12     	; 0x6a4 <vfprintf+0x11a>
 698:	83 37       	cpi	r24, 0x73	; 115
 69a:	71 f0       	breq	.+28     	; 0x6b8 <vfprintf+0x12e>
 69c:	83 35       	cpi	r24, 0x53	; 83
 69e:	09 f0       	breq	.+2      	; 0x6a2 <vfprintf+0x118>
 6a0:	59 c0       	rjmp	.+178    	; 0x754 <vfprintf+0x1ca>
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <vfprintf+0x15c>
 6a4:	f8 01       	movw	r30, r16
 6a6:	80 81       	ld	r24, Z
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	0e 5f       	subi	r16, 0xFE	; 254
 6ac:	1f 4f       	sbci	r17, 0xFF	; 255
 6ae:	88 24       	eor	r8, r8
 6b0:	83 94       	inc	r8
 6b2:	91 2c       	mov	r9, r1
 6b4:	53 01       	movw	r10, r6
 6b6:	13 c0       	rjmp	.+38     	; 0x6de <vfprintf+0x154>
 6b8:	28 01       	movw	r4, r16
 6ba:	f2 e0       	ldi	r31, 0x02	; 2
 6bc:	4f 0e       	add	r4, r31
 6be:	51 1c       	adc	r5, r1
 6c0:	f8 01       	movw	r30, r16
 6c2:	a0 80       	ld	r10, Z
 6c4:	b1 80       	ldd	r11, Z+1	; 0x01
 6c6:	36 fe       	sbrs	r3, 6
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <vfprintf+0x146>
 6ca:	69 2d       	mov	r22, r9
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0x14a>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	7f ef       	ldi	r23, 0xFF	; 255
 6d4:	c5 01       	movw	r24, r10
 6d6:	0e 94 b1 04 	call	0x962	; 0x962 <strnlen>
 6da:	4c 01       	movw	r8, r24
 6dc:	82 01       	movw	r16, r4
 6de:	f3 2d       	mov	r31, r3
 6e0:	ff 77       	andi	r31, 0x7F	; 127
 6e2:	3f 2e       	mov	r3, r31
 6e4:	16 c0       	rjmp	.+44     	; 0x712 <vfprintf+0x188>
 6e6:	28 01       	movw	r4, r16
 6e8:	22 e0       	ldi	r18, 0x02	; 2
 6ea:	42 0e       	add	r4, r18
 6ec:	51 1c       	adc	r5, r1
 6ee:	f8 01       	movw	r30, r16
 6f0:	a0 80       	ld	r10, Z
 6f2:	b1 80       	ldd	r11, Z+1	; 0x01
 6f4:	36 fe       	sbrs	r3, 6
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <vfprintf+0x174>
 6f8:	69 2d       	mov	r22, r9
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <vfprintf+0x178>
 6fe:	6f ef       	ldi	r22, 0xFF	; 255
 700:	7f ef       	ldi	r23, 0xFF	; 255
 702:	c5 01       	movw	r24, r10
 704:	0e 94 a6 04 	call	0x94c	; 0x94c <strnlen_P>
 708:	4c 01       	movw	r8, r24
 70a:	f3 2d       	mov	r31, r3
 70c:	f0 68       	ori	r31, 0x80	; 128
 70e:	3f 2e       	mov	r3, r31
 710:	82 01       	movw	r16, r4
 712:	33 fc       	sbrc	r3, 3
 714:	1b c0       	rjmp	.+54     	; 0x74c <vfprintf+0x1c2>
 716:	82 2d       	mov	r24, r2
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	88 16       	cp	r8, r24
 71c:	99 06       	cpc	r9, r25
 71e:	b0 f4       	brcc	.+44     	; 0x74c <vfprintf+0x1c2>
 720:	b6 01       	movw	r22, r12
 722:	80 e2       	ldi	r24, 0x20	; 32
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 72a:	2a 94       	dec	r2
 72c:	f4 cf       	rjmp	.-24     	; 0x716 <vfprintf+0x18c>
 72e:	f5 01       	movw	r30, r10
 730:	37 fc       	sbrc	r3, 7
 732:	85 91       	lpm	r24, Z+
 734:	37 fe       	sbrs	r3, 7
 736:	81 91       	ld	r24, Z+
 738:	5f 01       	movw	r10, r30
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 742:	21 10       	cpse	r2, r1
 744:	2a 94       	dec	r2
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	82 1a       	sub	r8, r18
 74a:	91 08       	sbc	r9, r1
 74c:	81 14       	cp	r8, r1
 74e:	91 04       	cpc	r9, r1
 750:	71 f7       	brne	.-36     	; 0x72e <vfprintf+0x1a4>
 752:	e8 c0       	rjmp	.+464    	; 0x924 <vfprintf+0x39a>
 754:	84 36       	cpi	r24, 0x64	; 100
 756:	11 f0       	breq	.+4      	; 0x75c <vfprintf+0x1d2>
 758:	89 36       	cpi	r24, 0x69	; 105
 75a:	41 f5       	brne	.+80     	; 0x7ac <vfprintf+0x222>
 75c:	f8 01       	movw	r30, r16
 75e:	37 fe       	sbrs	r3, 7
 760:	07 c0       	rjmp	.+14     	; 0x770 <vfprintf+0x1e6>
 762:	60 81       	ld	r22, Z
 764:	71 81       	ldd	r23, Z+1	; 0x01
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	93 81       	ldd	r25, Z+3	; 0x03
 76a:	0c 5f       	subi	r16, 0xFC	; 252
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0x1f6>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	07 2e       	mov	r0, r23
 776:	00 0c       	add	r0, r0
 778:	88 0b       	sbc	r24, r24
 77a:	99 0b       	sbc	r25, r25
 77c:	0e 5f       	subi	r16, 0xFE	; 254
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	f3 2d       	mov	r31, r3
 782:	ff 76       	andi	r31, 0x6F	; 111
 784:	3f 2e       	mov	r3, r31
 786:	97 ff       	sbrs	r25, 7
 788:	09 c0       	rjmp	.+18     	; 0x79c <vfprintf+0x212>
 78a:	90 95       	com	r25
 78c:	80 95       	com	r24
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	f0 68       	ori	r31, 0x80	; 128
 79a:	3f 2e       	mov	r3, r31
 79c:	2a e0       	ldi	r18, 0x0A	; 10
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	a3 01       	movw	r20, r6
 7a2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__ultoa_invert>
 7a6:	88 2e       	mov	r8, r24
 7a8:	86 18       	sub	r8, r6
 7aa:	45 c0       	rjmp	.+138    	; 0x836 <vfprintf+0x2ac>
 7ac:	85 37       	cpi	r24, 0x75	; 117
 7ae:	31 f4       	brne	.+12     	; 0x7bc <vfprintf+0x232>
 7b0:	23 2d       	mov	r18, r3
 7b2:	2f 7e       	andi	r18, 0xEF	; 239
 7b4:	b2 2e       	mov	r11, r18
 7b6:	2a e0       	ldi	r18, 0x0A	; 10
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	25 c0       	rjmp	.+74     	; 0x806 <vfprintf+0x27c>
 7bc:	93 2d       	mov	r25, r3
 7be:	99 7f       	andi	r25, 0xF9	; 249
 7c0:	b9 2e       	mov	r11, r25
 7c2:	8f 36       	cpi	r24, 0x6F	; 111
 7c4:	c1 f0       	breq	.+48     	; 0x7f6 <vfprintf+0x26c>
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <vfprintf+0x244>
 7c8:	88 35       	cpi	r24, 0x58	; 88
 7ca:	79 f0       	breq	.+30     	; 0x7ea <vfprintf+0x260>
 7cc:	b5 c0       	rjmp	.+362    	; 0x938 <vfprintf+0x3ae>
 7ce:	80 37       	cpi	r24, 0x70	; 112
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <vfprintf+0x24e>
 7d2:	88 37       	cpi	r24, 0x78	; 120
 7d4:	21 f0       	breq	.+8      	; 0x7de <vfprintf+0x254>
 7d6:	b0 c0       	rjmp	.+352    	; 0x938 <vfprintf+0x3ae>
 7d8:	e9 2f       	mov	r30, r25
 7da:	e0 61       	ori	r30, 0x10	; 16
 7dc:	be 2e       	mov	r11, r30
 7de:	b4 fe       	sbrs	r11, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x272>
 7e2:	fb 2d       	mov	r31, r11
 7e4:	f4 60       	ori	r31, 0x04	; 4
 7e6:	bf 2e       	mov	r11, r31
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x272>
 7ea:	34 fe       	sbrs	r3, 4
 7ec:	0a c0       	rjmp	.+20     	; 0x802 <vfprintf+0x278>
 7ee:	29 2f       	mov	r18, r25
 7f0:	26 60       	ori	r18, 0x06	; 6
 7f2:	b2 2e       	mov	r11, r18
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x278>
 7f6:	28 e0       	ldi	r18, 0x08	; 8
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <vfprintf+0x27c>
 7fc:	20 e1       	ldi	r18, 0x10	; 16
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x27c>
 802:	20 e1       	ldi	r18, 0x10	; 16
 804:	32 e0       	ldi	r19, 0x02	; 2
 806:	f8 01       	movw	r30, r16
 808:	b7 fe       	sbrs	r11, 7
 80a:	07 c0       	rjmp	.+14     	; 0x81a <vfprintf+0x290>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	06 c0       	rjmp	.+12     	; 0x826 <vfprintf+0x29c>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	a3 01       	movw	r20, r6
 828:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__ultoa_invert>
 82c:	88 2e       	mov	r8, r24
 82e:	86 18       	sub	r8, r6
 830:	fb 2d       	mov	r31, r11
 832:	ff 77       	andi	r31, 0x7F	; 127
 834:	3f 2e       	mov	r3, r31
 836:	36 fe       	sbrs	r3, 6
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x2ca>
 83a:	23 2d       	mov	r18, r3
 83c:	2e 7f       	andi	r18, 0xFE	; 254
 83e:	a2 2e       	mov	r10, r18
 840:	89 14       	cp	r8, r9
 842:	58 f4       	brcc	.+22     	; 0x85a <vfprintf+0x2d0>
 844:	34 fe       	sbrs	r3, 4
 846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x2d4>
 848:	32 fc       	sbrc	r3, 2
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x2d4>
 84c:	83 2d       	mov	r24, r3
 84e:	8e 7e       	andi	r24, 0xEE	; 238
 850:	a8 2e       	mov	r10, r24
 852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x2d4>
 854:	b8 2c       	mov	r11, r8
 856:	a3 2c       	mov	r10, r3
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x2d6>
 85a:	b8 2c       	mov	r11, r8
 85c:	01 c0       	rjmp	.+2      	; 0x860 <vfprintf+0x2d6>
 85e:	b9 2c       	mov	r11, r9
 860:	a4 fe       	sbrs	r10, 4
 862:	0f c0       	rjmp	.+30     	; 0x882 <vfprintf+0x2f8>
 864:	fe 01       	movw	r30, r28
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0x2ee>
 870:	9a 2d       	mov	r25, r10
 872:	99 7e       	andi	r25, 0xE9	; 233
 874:	a9 2e       	mov	r10, r25
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x300>
 878:	a2 fe       	sbrs	r10, 2
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x2fe>
 87c:	b3 94       	inc	r11
 87e:	b3 94       	inc	r11
 880:	04 c0       	rjmp	.+8      	; 0x88a <vfprintf+0x300>
 882:	8a 2d       	mov	r24, r10
 884:	86 78       	andi	r24, 0x86	; 134
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x300>
 888:	b3 94       	inc	r11
 88a:	a3 fc       	sbrc	r10, 3
 88c:	11 c0       	rjmp	.+34     	; 0x8b0 <vfprintf+0x326>
 88e:	a0 fe       	sbrs	r10, 0
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x314>
 892:	b2 14       	cp	r11, r2
 894:	88 f4       	brcc	.+34     	; 0x8b8 <vfprintf+0x32e>
 896:	28 0c       	add	r2, r8
 898:	92 2c       	mov	r9, r2
 89a:	9b 18       	sub	r9, r11
 89c:	0e c0       	rjmp	.+28     	; 0x8ba <vfprintf+0x330>
 89e:	b2 14       	cp	r11, r2
 8a0:	60 f4       	brcc	.+24     	; 0x8ba <vfprintf+0x330>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8ac:	b3 94       	inc	r11
 8ae:	f7 cf       	rjmp	.-18     	; 0x89e <vfprintf+0x314>
 8b0:	b2 14       	cp	r11, r2
 8b2:	18 f4       	brcc	.+6      	; 0x8ba <vfprintf+0x330>
 8b4:	2b 18       	sub	r2, r11
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x332>
 8b8:	98 2c       	mov	r9, r8
 8ba:	21 2c       	mov	r2, r1
 8bc:	a4 fe       	sbrs	r10, 4
 8be:	10 c0       	rjmp	.+32     	; 0x8e0 <vfprintf+0x356>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e3       	ldi	r24, 0x30	; 48
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8ca:	a2 fe       	sbrs	r10, 2
 8cc:	17 c0       	rjmp	.+46     	; 0x8fc <vfprintf+0x372>
 8ce:	a1 fc       	sbrc	r10, 1
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x34e>
 8d2:	88 e7       	ldi	r24, 0x78	; 120
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x352>
 8d8:	88 e5       	ldi	r24, 0x58	; 88
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	b6 01       	movw	r22, r12
 8de:	0c c0       	rjmp	.+24     	; 0x8f8 <vfprintf+0x36e>
 8e0:	8a 2d       	mov	r24, r10
 8e2:	86 78       	andi	r24, 0x86	; 134
 8e4:	59 f0       	breq	.+22     	; 0x8fc <vfprintf+0x372>
 8e6:	a1 fe       	sbrs	r10, 1
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x364>
 8ea:	8b e2       	ldi	r24, 0x2B	; 43
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <vfprintf+0x366>
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	a7 fc       	sbrc	r10, 7
 8f2:	8d e2       	ldi	r24, 0x2D	; 45
 8f4:	b6 01       	movw	r22, r12
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8fc:	89 14       	cp	r8, r9
 8fe:	38 f4       	brcc	.+14     	; 0x90e <vfprintf+0x384>
 900:	b6 01       	movw	r22, r12
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 90a:	9a 94       	dec	r9
 90c:	f7 cf       	rjmp	.-18     	; 0x8fc <vfprintf+0x372>
 90e:	8a 94       	dec	r8
 910:	f3 01       	movw	r30, r6
 912:	e8 0d       	add	r30, r8
 914:	f1 1d       	adc	r31, r1
 916:	80 81       	ld	r24, Z
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 920:	81 10       	cpse	r8, r1
 922:	f5 cf       	rjmp	.-22     	; 0x90e <vfprintf+0x384>
 924:	22 20       	and	r2, r2
 926:	09 f4       	brne	.+2      	; 0x92a <vfprintf+0x3a0>
 928:	42 ce       	rjmp	.-892    	; 0x5ae <vfprintf+0x24>
 92a:	b6 01       	movw	r22, r12
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 934:	2a 94       	dec	r2
 936:	f6 cf       	rjmp	.-20     	; 0x924 <vfprintf+0x39a>
 938:	f6 01       	movw	r30, r12
 93a:	86 81       	ldd	r24, Z+6	; 0x06
 93c:	97 81       	ldd	r25, Z+7	; 0x07
 93e:	02 c0       	rjmp	.+4      	; 0x944 <vfprintf+0x3ba>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	9f ef       	ldi	r25, 0xFF	; 255
 944:	2b 96       	adiw	r28, 0x0b	; 11
 946:	e2 e1       	ldi	r30, 0x12	; 18
 948:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__epilogue_restores__>

0000094c <strnlen_P>:
 94c:	fc 01       	movw	r30, r24
 94e:	05 90       	lpm	r0, Z+
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 10       	cpse	r0, r1
 956:	d8 f7       	brcc	.-10     	; 0x94e <strnlen_P+0x2>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	8e 0f       	add	r24, r30
 95e:	9f 1f       	adc	r25, r31
 960:	08 95       	ret

00000962 <strnlen>:
 962:	fc 01       	movw	r30, r24
 964:	61 50       	subi	r22, 0x01	; 1
 966:	70 40       	sbci	r23, 0x00	; 0
 968:	01 90       	ld	r0, Z+
 96a:	01 10       	cpse	r0, r1
 96c:	d8 f7       	brcc	.-10     	; 0x964 <strnlen+0x2>
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	8e 0f       	add	r24, r30
 974:	9f 1f       	adc	r25, r31
 976:	08 95       	ret

00000978 <fputc>:
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	fb 01       	movw	r30, r22
 982:	23 81       	ldd	r18, Z+3	; 0x03
 984:	21 fd       	sbrc	r18, 1
 986:	03 c0       	rjmp	.+6      	; 0x98e <fputc+0x16>
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	2c c0       	rjmp	.+88     	; 0x9e6 <fputc+0x6e>
 98e:	22 ff       	sbrs	r18, 2
 990:	16 c0       	rjmp	.+44     	; 0x9be <fputc+0x46>
 992:	46 81       	ldd	r20, Z+6	; 0x06
 994:	57 81       	ldd	r21, Z+7	; 0x07
 996:	24 81       	ldd	r18, Z+4	; 0x04
 998:	35 81       	ldd	r19, Z+5	; 0x05
 99a:	42 17       	cp	r20, r18
 99c:	53 07       	cpc	r21, r19
 99e:	44 f4       	brge	.+16     	; 0x9b0 <fputc+0x38>
 9a0:	a0 81       	ld	r26, Z
 9a2:	b1 81       	ldd	r27, Z+1	; 0x01
 9a4:	9d 01       	movw	r18, r26
 9a6:	2f 5f       	subi	r18, 0xFF	; 255
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	31 83       	std	Z+1, r19	; 0x01
 9ac:	20 83       	st	Z, r18
 9ae:	8c 93       	st	X, r24
 9b0:	26 81       	ldd	r18, Z+6	; 0x06
 9b2:	37 81       	ldd	r19, Z+7	; 0x07
 9b4:	2f 5f       	subi	r18, 0xFF	; 255
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	37 83       	std	Z+7, r19	; 0x07
 9ba:	26 83       	std	Z+6, r18	; 0x06
 9bc:	14 c0       	rjmp	.+40     	; 0x9e6 <fputc+0x6e>
 9be:	8b 01       	movw	r16, r22
 9c0:	ec 01       	movw	r28, r24
 9c2:	fb 01       	movw	r30, r22
 9c4:	00 84       	ldd	r0, Z+8	; 0x08
 9c6:	f1 85       	ldd	r31, Z+9	; 0x09
 9c8:	e0 2d       	mov	r30, r0
 9ca:	09 95       	icall
 9cc:	89 2b       	or	r24, r25
 9ce:	e1 f6       	brne	.-72     	; 0x988 <fputc+0x10>
 9d0:	d8 01       	movw	r26, r16
 9d2:	16 96       	adiw	r26, 0x06	; 6
 9d4:	8d 91       	ld	r24, X+
 9d6:	9c 91       	ld	r25, X
 9d8:	17 97       	sbiw	r26, 0x07	; 7
 9da:	01 96       	adiw	r24, 0x01	; 1
 9dc:	17 96       	adiw	r26, 0x07	; 7
 9de:	9c 93       	st	X, r25
 9e0:	8e 93       	st	-X, r24
 9e2:	16 97       	sbiw	r26, 0x06	; 6
 9e4:	ce 01       	movw	r24, r28
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	1f 91       	pop	r17
 9ec:	0f 91       	pop	r16
 9ee:	08 95       	ret

000009f0 <__ultoa_invert>:
 9f0:	fa 01       	movw	r30, r20
 9f2:	aa 27       	eor	r26, r26
 9f4:	28 30       	cpi	r18, 0x08	; 8
 9f6:	51 f1       	breq	.+84     	; 0xa4c <__ultoa_invert+0x5c>
 9f8:	20 31       	cpi	r18, 0x10	; 16
 9fa:	81 f1       	breq	.+96     	; 0xa5c <__ultoa_invert+0x6c>
 9fc:	e8 94       	clt
 9fe:	6f 93       	push	r22
 a00:	6e 7f       	andi	r22, 0xFE	; 254
 a02:	6e 5f       	subi	r22, 0xFE	; 254
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	af 4f       	sbci	r26, 0xFF	; 255
 a0c:	b1 e0       	ldi	r27, 0x01	; 1
 a0e:	3e d0       	rcall	.+124    	; 0xa8c <__ultoa_invert+0x9c>
 a10:	b4 e0       	ldi	r27, 0x04	; 4
 a12:	3c d0       	rcall	.+120    	; 0xa8c <__ultoa_invert+0x9c>
 a14:	67 0f       	add	r22, r23
 a16:	78 1f       	adc	r23, r24
 a18:	89 1f       	adc	r24, r25
 a1a:	9a 1f       	adc	r25, r26
 a1c:	a1 1d       	adc	r26, r1
 a1e:	68 0f       	add	r22, r24
 a20:	79 1f       	adc	r23, r25
 a22:	8a 1f       	adc	r24, r26
 a24:	91 1d       	adc	r25, r1
 a26:	a1 1d       	adc	r26, r1
 a28:	6a 0f       	add	r22, r26
 a2a:	71 1d       	adc	r23, r1
 a2c:	81 1d       	adc	r24, r1
 a2e:	91 1d       	adc	r25, r1
 a30:	a1 1d       	adc	r26, r1
 a32:	20 d0       	rcall	.+64     	; 0xa74 <__ultoa_invert+0x84>
 a34:	09 f4       	brne	.+2      	; 0xa38 <__ultoa_invert+0x48>
 a36:	68 94       	set
 a38:	3f 91       	pop	r19
 a3a:	2a e0       	ldi	r18, 0x0A	; 10
 a3c:	26 9f       	mul	r18, r22
 a3e:	11 24       	eor	r1, r1
 a40:	30 19       	sub	r19, r0
 a42:	30 5d       	subi	r19, 0xD0	; 208
 a44:	31 93       	st	Z+, r19
 a46:	de f6       	brtc	.-74     	; 0x9fe <__ultoa_invert+0xe>
 a48:	cf 01       	movw	r24, r30
 a4a:	08 95       	ret
 a4c:	46 2f       	mov	r20, r22
 a4e:	47 70       	andi	r20, 0x07	; 7
 a50:	40 5d       	subi	r20, 0xD0	; 208
 a52:	41 93       	st	Z+, r20
 a54:	b3 e0       	ldi	r27, 0x03	; 3
 a56:	0f d0       	rcall	.+30     	; 0xa76 <__ultoa_invert+0x86>
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__ultoa_invert+0x5c>
 a5a:	f6 cf       	rjmp	.-20     	; 0xa48 <__ultoa_invert+0x58>
 a5c:	46 2f       	mov	r20, r22
 a5e:	4f 70       	andi	r20, 0x0F	; 15
 a60:	40 5d       	subi	r20, 0xD0	; 208
 a62:	4a 33       	cpi	r20, 0x3A	; 58
 a64:	18 f0       	brcs	.+6      	; 0xa6c <__ultoa_invert+0x7c>
 a66:	49 5d       	subi	r20, 0xD9	; 217
 a68:	31 fd       	sbrc	r19, 1
 a6a:	40 52       	subi	r20, 0x20	; 32
 a6c:	41 93       	st	Z+, r20
 a6e:	02 d0       	rcall	.+4      	; 0xa74 <__ultoa_invert+0x84>
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__ultoa_invert+0x6c>
 a72:	ea cf       	rjmp	.-44     	; 0xa48 <__ultoa_invert+0x58>
 a74:	b4 e0       	ldi	r27, 0x04	; 4
 a76:	a6 95       	lsr	r26
 a78:	97 95       	ror	r25
 a7a:	87 95       	ror	r24
 a7c:	77 95       	ror	r23
 a7e:	67 95       	ror	r22
 a80:	ba 95       	dec	r27
 a82:	c9 f7       	brne	.-14     	; 0xa76 <__ultoa_invert+0x86>
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	61 05       	cpc	r22, r1
 a88:	71 05       	cpc	r23, r1
 a8a:	08 95       	ret
 a8c:	9b 01       	movw	r18, r22
 a8e:	ac 01       	movw	r20, r24
 a90:	0a 2e       	mov	r0, r26
 a92:	06 94       	lsr	r0
 a94:	57 95       	ror	r21
 a96:	47 95       	ror	r20
 a98:	37 95       	ror	r19
 a9a:	27 95       	ror	r18
 a9c:	ba 95       	dec	r27
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0xa2>
 aa0:	62 0f       	add	r22, r18
 aa2:	73 1f       	adc	r23, r19
 aa4:	84 1f       	adc	r24, r20
 aa6:	95 1f       	adc	r25, r21
 aa8:	a0 1d       	adc	r26, r0
 aaa:	08 95       	ret

00000aac <__prologue_saves__>:
 aac:	2f 92       	push	r2
 aae:	3f 92       	push	r3
 ab0:	4f 92       	push	r4
 ab2:	5f 92       	push	r5
 ab4:	6f 92       	push	r6
 ab6:	7f 92       	push	r7
 ab8:	8f 92       	push	r8
 aba:	9f 92       	push	r9
 abc:	af 92       	push	r10
 abe:	bf 92       	push	r11
 ac0:	cf 92       	push	r12
 ac2:	df 92       	push	r13
 ac4:	ef 92       	push	r14
 ac6:	ff 92       	push	r15
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	cd b7       	in	r28, 0x3d	; 61
 ad2:	de b7       	in	r29, 0x3e	; 62
 ad4:	ca 1b       	sub	r28, r26
 ad6:	db 0b       	sbc	r29, r27
 ad8:	0f b6       	in	r0, 0x3f	; 63
 ada:	f8 94       	cli
 adc:	de bf       	out	0x3e, r29	; 62
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	cd bf       	out	0x3d, r28	; 61
 ae2:	09 94       	ijmp

00000ae4 <__epilogue_restores__>:
 ae4:	2a 88       	ldd	r2, Y+18	; 0x12
 ae6:	39 88       	ldd	r3, Y+17	; 0x11
 ae8:	48 88       	ldd	r4, Y+16	; 0x10
 aea:	5f 84       	ldd	r5, Y+15	; 0x0f
 aec:	6e 84       	ldd	r6, Y+14	; 0x0e
 aee:	7d 84       	ldd	r7, Y+13	; 0x0d
 af0:	8c 84       	ldd	r8, Y+12	; 0x0c
 af2:	9b 84       	ldd	r9, Y+11	; 0x0b
 af4:	aa 84       	ldd	r10, Y+10	; 0x0a
 af6:	b9 84       	ldd	r11, Y+9	; 0x09
 af8:	c8 84       	ldd	r12, Y+8	; 0x08
 afa:	df 80       	ldd	r13, Y+7	; 0x07
 afc:	ee 80       	ldd	r14, Y+6	; 0x06
 afe:	fd 80       	ldd	r15, Y+5	; 0x05
 b00:	0c 81       	ldd	r16, Y+4	; 0x04
 b02:	1b 81       	ldd	r17, Y+3	; 0x03
 b04:	aa 81       	ldd	r26, Y+2	; 0x02
 b06:	b9 81       	ldd	r27, Y+1	; 0x01
 b08:	ce 0f       	add	r28, r30
 b0a:	d1 1d       	adc	r29, r1
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	de bf       	out	0x3e, r29	; 62
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	cd bf       	out	0x3d, r28	; 61
 b16:	ed 01       	movw	r28, r26
 b18:	08 95       	ret

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
