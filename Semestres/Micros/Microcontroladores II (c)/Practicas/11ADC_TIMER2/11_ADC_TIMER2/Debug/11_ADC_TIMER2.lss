
11_ADC_TIMER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f7  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
}

uint8_t cont = 0;
int main(void)
{
	sei();
  92:	78 94       	sei
	//TIMER 0
	TIFR = 0b00000011;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	88 bf       	out	0x38, r24	; 56
	TIMSK = 0b00000010;
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	99 bf       	out	0x39, r25	; 57
	OCR0 = 97; //CAMBIAR
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	9c bf       	out	0x3c, r25	; 60
	TCNT0 = 0;
  a0:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0b0001101; //CAMBIAR
  a2:	9d e0       	ldi	r25, 0x0D	; 13
  a4:	93 bf       	out	0x33, r25	; 51

	
	//TIMER2 - pwm
	//TIFR = 0b00000011; //no necesaria por pwm
	//TIMSK = 0b00000010; //no necesaria por pwm
	DDRD = 0xFF; //salida
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	91 bb       	out	0x11, r25	; 17
	PORTD = 0;
  aa:	12 ba       	out	0x12, r1	; 18
	OCR2 = 0; //CAMBIAR
  ac:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
  ae:	14 bc       	out	0x24, r1	; 36
	TCCR2 = 0b01101100; //CAMBIAR
  b0:	2c e6       	ldi	r18, 0x6C	; 108
  b2:	25 bd       	out	0x25, r18	; 37
	
	//ADC
	ADMUX =     0b01000010; //patita A2 que es donde entra la señal a replicar
  b4:	22 e4       	ldi	r18, 0x42	; 66
  b6:	27 b9       	out	0x07, r18	; 7
	SFIOR =     0b00000011; //Trigger timer0-comp
  b8:	80 bf       	out	0x30, r24	; 48
	ADCSRA =    0b11111011; 
  ba:	8b ef       	ldi	r24, 0xFB	; 251
  bc:	86 b9       	out	0x06, r24	; 6
	DDRA =      0;
  be:	1a ba       	out	0x1a, r1	; 26
	PORTA =     0; //ADC doesnt need pull up
  c0:	1b ba       	out	0x1b, r1	; 27
	sei();
  c2:	78 94       	sei
	ADCSRA |= (1<<ADSC); //le digo que inicie
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	86 b9       	out	0x06, r24	; 6
	
	DDRC = 0xFF;
  ca:	94 bb       	out	0x14, r25	; 20
	PORTC = 0;
  cc:	15 ba       	out	0x15, r1	; 21
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x3c>

000000d0 <__vector_14>:
	while (1){}
}


//interrupciones
ISR(ADC_vect){ 
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	uint16_t rej = ADC;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	95 b1       	in	r25, 0x05	; 5
	rej /= 4; //convertir de 0->1023 a 0->255 de ocr
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
	PORTC = OCR2 = rej;
  ea:	83 bd       	out	0x23, r24	; 35
  ec:	85 bb       	out	0x15, r24	; 21
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_19>:
ISR(TIMER0_COMP_vect){ }
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
