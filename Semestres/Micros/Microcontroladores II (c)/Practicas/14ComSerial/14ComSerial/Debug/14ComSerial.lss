
14ComSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800060  00800060  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fc  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a5  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dc  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000852  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 38       	cpi	r26, 0x83	; 131
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  74:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <saca_uno>:
	/* Wait for data to be received */
	while(!(UCSRA & (1<<RXC))){} //traba
	
	/* Get and return received data from buffer */
	return UDR;
}
  7c:	fc 01       	movw	r30, r24
  7e:	40 81       	ld	r20, Z
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <saca_uno+0xe>
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	6a 95       	dec	r22
  8c:	e2 f7       	brpl	.-8      	; 0x86 <saca_uno+0xa>
  8e:	24 2b       	or	r18, r20
  90:	20 83       	st	Z, r18
  92:	08 95       	ret

00000094 <saca_cero>:
  94:	fc 01       	movw	r30, r24
  96:	90 81       	ld	r25, Z
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <saca_cero+0xe>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <saca_cero+0xa>
  a6:	20 95       	com	r18
  a8:	29 23       	and	r18, r25
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <LCD_wr_inst_ini>:
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	64 e0       	ldi	r22, 0x04	; 4
  b2:	85 e3       	ldi	r24, 0x35	; 53
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	85 e3       	ldi	r24, 0x35	; 53
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
  c4:	66 e0       	ldi	r22, 0x06	; 6
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	97 e2       	ldi	r25, 0x27	; 39
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_wr_inst_ini+0x24>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_wr_inst_ini+0x2a>
  d8:	00 00       	nop
  da:	66 e0       	ldi	r22, 0x06	; 6
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
  e4:	08 95       	ret

000000e6 <LCD_wait_flag>:
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	85 e3       	ldi	r24, 0x35	; 53
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	85 e3       	ldi	r24, 0x35	; 53
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 100:	66 e0       	ldi	r22, 0x06	; 6
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	97 e2       	ldi	r25, 0x27	; 39
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_wait_flag+0x28>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_wait_flag+0x2e>
 114:	00 00       	nop
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	85 e3       	ldi	r24, 0x35	; 53
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 120:	9b 99       	sbic	0x13, 3	; 19
 122:	15 c0       	rjmp	.+42     	; 0x14e <LCD_wait_flag+0x68>
 124:	9d e0       	ldi	r25, 0x0D	; 13
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_wait_flag+0x40>
 12a:	00 00       	nop
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	97 e2       	ldi	r25, 0x27	; 39
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_wait_flag+0x54>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_wait_flag+0x5a>
 140:	00 00       	nop
 142:	66 e0       	ldi	r22, 0x06	; 6
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 14c:	d9 cf       	rjmp	.-78     	; 0x100 <LCD_wait_flag+0x1a>
 14e:	66 e0       	ldi	r22, 0x06	; 6
 150:	85 e3       	ldi	r24, 0x35	; 53
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	97 e2       	ldi	r25, 0x27	; 39
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_wait_flag+0x76>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_wait_flag+0x7c>
 162:	00 00       	nop
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	85 e3       	ldi	r24, 0x35	; 53
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	85 e3       	ldi	r24, 0x35	; 53
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	85 e3       	ldi	r24, 0x35	; 53
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 182:	84 b3       	in	r24, 0x14	; 20
 184:	8f 67       	ori	r24, 0x7F	; 127
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret

0000018a <LCD_wr_char>:
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	85 bb       	out	0x15, r24	; 21
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 19e:	65 e0       	ldi	r22, 0x05	; 5
 1a0:	85 e3       	ldi	r24, 0x35	; 53
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	97 e2       	ldi	r25, 0x27	; 39
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_wr_char+0x2c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_wr_char+0x32>
 1bc:	00 00       	nop
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 1c8:	cf 70       	andi	r28, 0x0F	; 15
 1ca:	c5 bb       	out	0x15, r28	; 21
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	85 e3       	ldi	r24, 0x35	; 53
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 1e0:	66 e0       	ldi	r22, 0x06	; 6
 1e2:	85 e3       	ldi	r24, 0x35	; 53
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	97 e2       	ldi	r25, 0x27	; 39
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_wr_char+0x64>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_wr_char+0x6a>
 1f4:	00 00       	nop
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	85 e3       	ldi	r24, 0x35	; 53
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 200:	64 e0       	ldi	r22, 0x04	; 4
 202:	85 e3       	ldi	r24, 0x35	; 53
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 20a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_wait_flag>
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_wr_instruction>:
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
 216:	82 95       	swap	r24
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	85 bb       	out	0x15, r24	; 21
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	85 e3       	ldi	r24, 0x35	; 53
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 230:	66 e0       	ldi	r22, 0x06	; 6
 232:	85 e3       	ldi	r24, 0x35	; 53
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 23a:	8f e0       	ldi	r24, 0x0F	; 15
 23c:	97 e2       	ldi	r25, 0x27	; 39
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_wr_instruction+0x2c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_wr_instruction+0x32>
 244:	00 00       	nop
 246:	66 e0       	ldi	r22, 0x06	; 6
 248:	85 e3       	ldi	r24, 0x35	; 53
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 250:	cf 70       	andi	r28, 0x0F	; 15
 252:	c5 bb       	out	0x15, r28	; 21
 254:	64 e0       	ldi	r22, 0x04	; 4
 256:	85 e3       	ldi	r24, 0x35	; 53
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 268:	66 e0       	ldi	r22, 0x06	; 6
 26a:	85 e3       	ldi	r24, 0x35	; 53
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 3e 00 	call	0x7c	; 0x7c <saca_uno>
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	97 e2       	ldi	r25, 0x27	; 39
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_wr_instruction+0x64>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_wr_instruction+0x6a>
 27c:	00 00       	nop
 27e:	66 e0       	ldi	r22, 0x06	; 6
 280:	85 e3       	ldi	r24, 0x35	; 53
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 4a 00 	call	0x94	; 0x94 <saca_cero>
 288:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_wait_flag>
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_init>:
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	84 bb       	out	0x14, r24	; 20
 294:	87 e9       	ldi	r24, 0x97	; 151
 296:	9a e3       	ldi	r25, 0x3A	; 58
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_init+0x8>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_init+0xe>
 29e:	00 00       	nop
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 57 00 	call	0xae	; 0xae <LCD_wr_inst_ini>
 2a6:	87 e8       	ldi	r24, 0x87	; 135
 2a8:	93 e1       	ldi	r25, 0x13	; 19
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_init+0x1a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_init+0x20>
 2b0:	00 00       	nop
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 57 00 	call	0xae	; 0xae <LCD_wr_inst_ini>
 2b8:	95 e8       	ldi	r25, 0x85	; 133
 2ba:	9a 95       	dec	r25
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_init+0x2a>
 2be:	00 00       	nop
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	0e 94 57 00 	call	0xae	; 0xae <LCD_wr_inst_ini>
 2c6:	85 e8       	ldi	r24, 0x85	; 133
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_init+0x38>
 2cc:	00 00       	nop
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 57 00 	call	0xae	; 0xae <LCD_wr_inst_ini>
 2d4:	95 e8       	ldi	r25, 0x85	; 133
 2d6:	9a 95       	dec	r25
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_init+0x46>
 2da:	00 00       	nop
 2dc:	88 e2       	ldi	r24, 0x28	; 40
 2de:	0e 94 09 01 	call	0x212	; 0x212 <LCD_wr_instruction>
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	0e 94 09 01 	call	0x212	; 0x212 <LCD_wr_instruction>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 09 01 	call	0x212	; 0x212 <LCD_wr_instruction>
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	0e 94 09 01 	call	0x212	; 0x212 <LCD_wr_instruction>
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 09 01 	call	0x212	; 0x212 <LCD_wr_instruction>
 2fa:	08 95       	ret

000002fc <USART_Init>:
 2fc:	91 b3       	in	r25, 0x11	; 17
 2fe:	92 60       	ori	r25, 0x02	; 2
 300:	91 bb       	out	0x11, r25	; 17
 302:	10 bc       	out	0x20, r1	; 32
 304:	89 b9       	out	0x09, r24	; 9
 306:	88 e9       	ldi	r24, 0x98	; 152
 308:	8a b9       	out	0x0a, r24	; 10
 30a:	8e e8       	ldi	r24, 0x8E	; 142
 30c:	80 bd       	out	0x20, r24	; 32
 30e:	08 95       	ret

00000310 <__vector_11>:
   
volatile uint8_t dato;
ISR(USART_RXC_vect){
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	dato = UDR;
 332:	8c b1       	in	r24, 0x0c	; 12
 334:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <dato>
	LCD_wr_char(dato);
 338:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <dato>
 33c:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_wr_char>
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <main>:


int main(void)
{
	sei();
 362:	78 94       	sei
	LCD_init();
 364:	0e 94 48 01 	call	0x290	; 0x290 <LCD_init>
	USART_Init(MYUBRR);
 368:	87 e6       	ldi	r24, 0x67	; 103
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <USART_Init>
	DDRB = 1;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	87 bb       	out	0x17, r24	; 23
	PORTB = 1;
 374:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	2f e7       	ldi	r18, 0x7F	; 127
 378:	8a e1       	ldi	r24, 0x1A	; 26
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x1a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x24>
 386:	00 00       	nop
	delay(500);
	PORTB = 0;
 388:	18 ba       	out	0x18, r1	; 24
	while (1){
		if(dato == '1') PORTB = 1;
 38a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <dato>
 38e:	81 33       	cpi	r24, 0x31	; 49
 390:	19 f4       	brne	.+6      	; 0x398 <main+0x36>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	88 bb       	out	0x18, r24	; 24
 396:	f9 cf       	rjmp	.-14     	; 0x38a <main+0x28>
		else PORTB = 0;
 398:	18 ba       	out	0x18, r1	; 24
 39a:	f7 cf       	rjmp	.-18     	; 0x38a <main+0x28>

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
