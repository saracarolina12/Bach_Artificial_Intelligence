
08.1-Teclado3x4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d2  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000667  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060e  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RTR>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	e3 ed       	ldi	r30, 0xD3	; 211
  94:	f0 e3       	ldi	r31, 0x30	; 48
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <RTR+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <RTR+0xa>
  9c:	00 00       	nop
{0xE, 0x0, 0xF}
};

void RTR(uint8_t pin){
	_delay_ms(50);
	while(isClear(PINT,pin));
  9e:	20 b3       	in	r18, 0x10	; 16
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 2e       	mov	r0, r24
  a4:	02 c0       	rjmp	.+4      	; 0xaa <RTR+0x18>
  a6:	35 95       	asr	r19
  a8:	27 95       	ror	r18
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <RTR+0x14>
  ae:	20 ff       	sbrs	r18, 0
  b0:	f6 cf       	rjmp	.-20     	; 0x9e <RTR+0xc>
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <RTR+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <RTR+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <pressed>:
	_delay_ms(50);
}

uint8_t pressed(void){
	while(1){
		seed++;
  c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		PORTT = ~(1<<0);				//1111_1110 rota tierra
  ca:	8e ef       	ldi	r24, 0xFE	; 254
  cc:	85 bb       	out	0x15, r24	; 21
		asm("nop");
  ce:	00 00       	nop
		asm("nop");
  d0:	00 00       	nop
			//return(keyb[0][3]);
		//}
		
		
		//3,6,9,#(F)
		if(isClear(PINT,7)){		//A
  d2:	87 99       	sbic	0x10, 7	; 16
  d4:	09 c0       	rjmp	.+18     	; 0xe8 <pressed+0x28>
			DDRC = 0;
  d6:	14 ba       	out	0x14, r1	; 20
			RTR(7);
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			DDRC = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	84 bb       	out	0x14, r24	; 20
			return(keyb[3][2]);
  e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
  e6:	08 95       	ret
		}
		if(isClear(PINT,6)){		//B
  e8:	86 99       	sbic	0x10, 6	; 16
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <pressed+0x38>
			RTR(6);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[2][2]);
  f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
  f6:	08 95       	ret
		}
		if(isClear(PINT,5)){		//C
  f8:	85 99       	sbic	0x10, 5	; 16
  fa:	06 c0       	rjmp	.+12     	; 0x108 <pressed+0x48>
			RTR(5);
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[1][2]);
 102:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 106:	08 95       	ret
		}
		if(isClear(PINT,4)){		//D
 108:	84 99       	sbic	0x10, 4	; 16
 10a:	06 c0       	rjmp	.+12     	; 0x118 <pressed+0x58>
			RTR(4);
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[0][2]);
 112:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 116:	08 95       	ret
		}
		PORTT = ~(1<<1);
 118:	8d ef       	ldi	r24, 0xFD	; 253
 11a:	85 bb       	out	0x15, r24	; 21
		
		
		//2,5,8,0
		if(isClear(PINT,7)){		//A
 11c:	87 99       	sbic	0x10, 7	; 16
 11e:	06 c0       	rjmp	.+12     	; 0x12c <pressed+0x6c>
			RTR(7);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[3][1]);
 126:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 12a:	08 95       	ret
		}
		if(isClear(PINT,6)){		//B
 12c:	86 99       	sbic	0x10, 6	; 16
 12e:	06 c0       	rjmp	.+12     	; 0x13c <pressed+0x7c>
			RTR(6);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[2][1]);
 136:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 13a:	08 95       	ret
		}
		if(isClear(PINT,5)){		//C
 13c:	85 99       	sbic	0x10, 5	; 16
 13e:	06 c0       	rjmp	.+12     	; 0x14c <pressed+0x8c>
			RTR(5);
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[1][1]);
 146:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 14a:	08 95       	ret
		}
		if(isClear(PINT,4)){		//D
 14c:	84 99       	sbic	0x10, 4	; 16
 14e:	06 c0       	rjmp	.+12     	; 0x15c <pressed+0x9c>
			RTR(4);
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[0][1]);
 156:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	08 95       	ret
		}
		PORTT = ~(1<<2);
 15c:	8b ef       	ldi	r24, 0xFB	; 251
 15e:	85 bb       	out	0x15, r24	; 21
		
		
		//1,4,7,*(E)
		if(isClear(PINT,7)){		//A
 160:	87 99       	sbic	0x10, 7	; 16
 162:	06 c0       	rjmp	.+12     	; 0x170 <pressed+0xb0>
			RTR(7);
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[3][0]);
 16a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 16e:	08 95       	ret
		}
		if(isClear(PINT,6)){		//B
 170:	86 99       	sbic	0x10, 6	; 16
 172:	06 c0       	rjmp	.+12     	; 0x180 <pressed+0xc0>
			RTR(6);
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[2][0]);
 17a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 17e:	08 95       	ret
		}
		if(isClear(PINT,5)){		//C
 180:	85 99       	sbic	0x10, 5	; 16
 182:	06 c0       	rjmp	.+12     	; 0x190 <pressed+0xd0>
			RTR(5);
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[1][0]);
 18a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 18e:	08 95       	ret
		}
		if(isClear(PINT,4)){		//D
 190:	84 99       	sbic	0x10, 4	; 16
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <pressed+0xe0>
			RTR(4);
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	0e 94 49 00 	call	0x92	; 0x92 <RTR>
			return(keyb[0][0]);
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19e:	08 95       	ret
		}
		PORTT = ~(1<<3);
 1a0:	87 ef       	ldi	r24, 0xF7	; 247
 1a2:	85 bb       	out	0x15, r24	; 21

	}
 1a4:	8d cf       	rjmp	.-230    	; 0xc0 <pressed>

000001a6 <main>:
	//srand(0); //seed
	//random values
	// rnd = rand() % (b-a) + a; //Random within a limit [a;b)
	//LCD_init();
	//teclado
	DDRC = 0b00000111;					//7->4: entradas,3->0:  salidas(rotar tierra)
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	85 bb       	out	0x15, r24	; 21
	DDRD = 0b00001111;
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	91 bb       	out	0x11, r25	; 17
	PORTD =	0xFF;
 1b2:	82 bb       	out	0x12, r24	; 18
	//display
	DDRA = 0xFF;
 1b4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
 1b6:	1b ba       	out	0x1b, r1	; 27
	//pruebas
	DDRB = 0;
 1b8:	17 ba       	out	0x17, r1	; 23
	
	uint8_t tecla;
	
	while (1){
		tecla = pressed();
 1ba:	0e 94 60 00 	call	0xc0	; 0xc0 <pressed>
		PORTA = tecla;
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <main+0x14>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
